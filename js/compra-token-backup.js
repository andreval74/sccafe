/**
 * üõí COMPRA DE TOKENS DIN√ÇMICA - M√ìDULO ESPEC√çFICO
 * 
 * üìç RESPONSABILIDADES:
 * - Interface din√¢mica para compra de tokens via MetaMask
 * - Verifica√ß√£o de conex√£o e habilita√ß√£o de campos
 * - Leitura din√¢mica de contratos da blockchain
 * - Verifica√ß√£o de compatibilidade para compra direta
 * - C√°lculo din√¢mico de pre√ßos e execu√ß√£o de transa√ß√µes
 * 
 * üîó DEPEND√äNCIAS:
 * - ethers.js v5.7.2
 * - MetaMaskConnector (shared/metamask-connector.js) - REUTILIZADO
 * - CommonUtils (shared/common-utils.js) - REUTILIZADO
 * - TokenGlobal (shared/token-global.js) - REUTILIZADO
 * 
 * üì§ EXPORTS:
 * - DynamicTokenPurchase: Classe principal
 * - Fun√ß√µes utilit√°rias espec√≠ficas de compra din√¢mica
 */

// ==================== CONFIGURA√á√ïES ====================

const CONFIG = {
    // Configura√ß√µes din√¢micas (sem contrato fixo)
    defaultTokenPrice: "0.001", // BNB por token (padr√£o)
    supportedChains: [56, 97], // BSC Mainnet e Testnet
    
    // ABI estendido para verifica√ß√£o completa
    tokenABI: [
        // Fun√ß√µes b√°sicas ERC-20
        "function balanceOf(address owner) view returns (uint256)",
        "function totalSupply() view returns (uint256)",
        "function name() view returns (string)",
        "function symbol() view returns (string)",
        "function decimals() view returns (uint8)",
        "function transfer(address to, uint256 amount) returns (bool)",
        
        // Fun√ß√µes para verificar compra direta
        "function buy() payable",
        "function buyTokens() payable",
        "function purchase() payable",
        "function tokenPrice() view returns (uint256)",
        "function price() view returns (uint256)",
        "function getPrice() view returns (uint256)"
    ],
    
    // Configura√ß√µes de gas
    gasLimit: 200000,
    gasPrice: "5000000000" // 5 gwei
};

// ==================== ESTADO GLOBAL ====================

let currentProvider = null;
let currentSigner = null;
let walletConnected = false;
let walletAddress = '';
let networkData = {};
let currentContract = null;
let tokenInfo = {};
let buyFunctionName = null;

// ==================== INICIALIZA√á√ÉO ====================

/**
 * Inicializa√ß√£o principal
 */
document.addEventListener('DOMContentLoaded', function() {
    console.log('üõí Sistema de Compra Din√¢mica iniciado');
    
    initializeWalletConnection();
    setupEventListeners();
    checkInitialWalletState();
});

/**
 * Verifica estado inicial da wallet (sem tentar conectar)
 */
async function checkInitialWalletState() {
    if (typeof window.ethereum !== 'undefined') {
        try {
            // Apenas verifica se j√° est√° conectado, sem solicitar
            const accounts = await window.ethereum.request({
                method: 'eth_accounts'
            });
            
            if (accounts.length > 0) {
                walletAddress = accounts[0];
                walletConnected = true;
                await detectNetwork();
                updateWalletUI();
                enableContractSection();
            }
        } catch (error) {
            console.log('Wallet n√£o conectada previamente');
        }
    }
}

/**
 * Configura event listeners
 */
function setupEventListeners() {
    // Conex√£o MetaMask
    const connectBtn = document.getElementById('connect-metamask-btn');
    if (connectBtn) {
        connectBtn.addEventListener('click', connectWallet);
    }
    
    // Verifica√ß√£o de contrato
    const verifyBtn = document.getElementById('verify-contract-btn');
    if (verifyBtn) {
        verifyBtn.addEventListener('click', verifyContract);
    }
    
    // Campo de endere√ßo do contrato
    const contractInput = document.getElementById('contract-address');
    if (contractInput) {
        contractInput.addEventListener('input', validateContractAddress);
    }
    
    // Campos de compra
    const quantityInput = document.getElementById('token-quantity');
    const priceInput = document.getElementById('token-price');
    
    if (quantityInput) {
        quantityInput.addEventListener('input', calculateTotal);
    }
    
    if (priceInput) {
        priceInput.addEventListener('input', calculateTotal);
    }
    
    // Bot√£o de compra
    const purchaseBtn = document.getElementById('execute-purchase-btn');
    if (purchaseBtn) {
        purchaseBtn.addEventListener('click', executePurchase);
    }
}

// ==================== GERENCIAMENTO DE WALLET ====================

/**
 * Conecta com a MetaMask
 */
async function connectWallet() {
    try {
        if (typeof window.ethereum === 'undefined') {
            alert('MetaMask n√£o detectado! Por favor, instale a MetaMask.');
            return;
        }
        
        console.log('üîó Conectando com MetaMask...');
        
        // Solicita conex√£o
        const accounts = await window.ethereum.request({
            method: 'eth_requestAccounts'
        });
        
        if (accounts.length > 0) {
            walletAddress = accounts[0];
            walletConnected = true;
            
            // Atualiza UI
            await detectNetwork();
            updateWalletUI();
            enableContractSection();
            
            console.log('‚úÖ Wallet conectada:', walletAddress);
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao conectar wallet:', error);
        alert('Erro ao conectar com a MetaMask: ' + error.message);
    }
}

/**
 * Atualiza interface da wallet
 */
function updateWalletUI() {
    const statusInput = document.getElementById('wallet-status');
    const connectBtn = document.getElementById('connect-metamask-btn');
    const networkSection = document.getElementById('network-info-section');
    
    if (walletConnected && walletAddress) {
        // Status da wallet
        if (statusInput) {
            statusInput.value = `${walletAddress.slice(0, 6)}...${walletAddress.slice(-4)}`;
            statusInput.classList.add('text-success');
        }
        
        // Bot√£o conectar
        if (connectBtn) {
            connectBtn.innerHTML = '<i class="bi bi-check-circle"></i> CONECTADO';
            connectBtn.classList.remove('btn-warning');
            connectBtn.classList.add('btn-success');
            connectBtn.disabled = true;
        }
        
        // Mostra info da rede
        if (networkSection) {
            networkSection.style.display = 'block';
        }
    }
}

/**
 * Detecta a rede atual
 */
async function detectNetwork() {
    try {
        const chainId = await window.ethereum.request({
            method: 'eth_chainId'
        });
        
        networkData = getNetworkInfo(chainId);
        
        // Atualiza UI da rede
        const currentNetworkSpan = document.getElementById('current-network');
        const chainIdSpan = document.getElementById('chain-id-value');
        
        if (currentNetworkSpan) {
            currentNetworkSpan.textContent = networkData.name;
        }
        
        if (chainIdSpan) {
            chainIdSpan.textContent = networkData.chainId;
        }
        
        console.log('üåê Rede detectada:', networkData);
        
    } catch (error) {
        console.error('‚ùå Erro ao detectar rede:', error);
    }
}

/**
 * Obt√©m informa√ß√µes da rede baseado no chainId
 */
function getNetworkInfo(chainId) {
    const networks = {
        '0x38': { name: 'BSC Mainnet', chainId: '56' },
        '0x61': { name: 'BSC Testnet', chainId: '97' },
        '0x1': { name: 'Ethereum Mainnet', chainId: '1' },
        '0x89': { name: 'Polygon Mainnet', chainId: '137' },
        '0xaa36a7': { name: 'Sepolia Testnet', chainId: '11155111' }
    };
    
    return networks[chainId] || { 
        name: 'Rede Desconhecida', 
        chainId: parseInt(chainId, 16).toString() 
    };
}

// ==================== GERENCIAMENTO DE CONTRATO ====================

/**
 * Habilita se√ß√£o de contrato ap√≥s conex√£o
 */
function enableContractSection() {
    const contractInput = document.getElementById('contract-address');
    const verifyBtn = document.getElementById('verify-contract-btn');
    
    if (contractInput) {
        contractInput.disabled = false;
        contractInput.placeholder = "0x1234567890123456789012345678901234567890";
    }
    
    if (verifyBtn) {
        verifyBtn.disabled = false;
    }
}
    _addMessage(listId, containerId, msg, type) {
        const ul = document.getElementById(listId);
        const container = document.getElementById(containerId);
        
        if (ul && container) {
            const li = document.createElement("li");
            li.textContent = msg;
            li.className = `text-dark mb-1 ${type === 'error' ? 'text-danger' : ''}`;
            ul.appendChild(li);
            container.style.display = "block";
        }
    },
    
    /**
     * M√©todo interno para limpar mensagens
     */
    _clearMessages(listId, containerId) {
        const ul = document.getElementById(listId);
        const container = document.getElementById(containerId);
        
        if (ul) ul.innerHTML = "";
        if (container) container.style.display = "none";
    }
};

// ==================== FUN√á√ïES DE CONEX√ÉO ====================

/**
 * Conecta com a carteira MetaMask
 * REUTILIZA o MetaMaskConnector global existente do projeto
 */
async function connectWallet() {
    FeedbackSystem.clearConnectionMessages();
    
    try {
        // USAR fun√ß√£o global existente do projeto
        if (!window.isMetaMaskInstalled || !window.isMetaMaskInstalled()) {
            FeedbackSystem.addConnectionMessage("‚ùå MetaMask n√£o instalado!", 'error');
            if (window.showMetaMaskInstallModal) {
                window.showMetaMaskInstallModal();
            }
            return false;
        }
        
        FeedbackSystem.addConnectionMessage("üîç Verificando conectividade...");
        
        // USAR MetaMaskConnector global existente
        const connectionResult = await window.connectWallet();
        
        if (connectionResult && connectionResult.account) {
            FeedbackSystem.addConnectionMessage(`‚úÖ Carteira conectada: ${connectionResult.account}`);
            
            // Verificar rede BSC Testnet
            if (connectionResult.chainId !== CONFIG.targetChainId) {
                FeedbackSystem.addConnectionMessage(`‚ö†Ô∏è Voc√™ est√° na rede ${connectionResult.networkName} (chainId: ${connectionResult.chainId})`, 'error');
                FeedbackSystem.addConnectionMessage("Por favor, mude para BSC Testnet (chainId: 97)");
                
                // Tentar trocar automaticamente
                try {
                    FeedbackSystem.addConnectionMessage("üîÑ Tentando trocar para BSC Testnet...");
                    await window.switchToNetwork(CONFIG.targetChainId);
                    FeedbackSystem.addConnectionMessage("‚úÖ Trocado para BSC Testnet com sucesso!");
                } catch (switchError) {
                    FeedbackSystem.addConnectionMessage(`‚ùå Erro ao trocar rede: ${switchError.message}`, 'error');
                    return false;
                }
            } else {
                FeedbackSystem.addConnectionMessage("‚úÖ Conectado √† BSC Testnet");
            }
            
            // Criar provider ethers.js
            currentProvider = new ethers.providers.Web3Provider(window.ethereum);
            currentSigner = currentProvider.getSigner();
            
            // Verificar saldo BNB
            const balance = await currentProvider.getBalance(connectionResult.account);
            const balanceFormatted = ethers.utils.formatEther(balance);
            FeedbackSystem.addConnectionMessage(`üí∞ Saldo BNB: ${parseFloat(balanceFormatted).toFixed(4)} BNB`);
            
            isConnected = true;
            updateConnectionStatus(connectionResult.account);
            
            return true;
        }
        
        return false;
        
    } catch (err) {
        FeedbackSystem.addConnectionMessage(`‚ùå Erro de conectividade: ${err.message}`, 'error');
        FeedbackSystem.addConnectionMessage("üí° Poss√≠veis solu√ß√µes:");
        FeedbackSystem.addConnectionMessage("‚Ä¢ Reinicie o MetaMask");
        FeedbackSystem.addConnectionMessage("‚Ä¢ Mude para BSC Testnet manualmente");
        FeedbackSystem.addConnectionMessage("‚Ä¢ Verifique sua conex√£o com internet");
        return false;
    }
}

/**
 * Atualiza status visual da conex√£o
 */
function updateConnectionStatus(address) {
    const statusEl = document.getElementById("status");
    if (statusEl) {
        statusEl.innerText = `‚úÖ Carteira conectada: ${address}`;
    }
}

// ==================== FUN√á√ïES DE VERIFICA√á√ÉO DE CONTRATO ====================

/**
 * Verifica o contrato de tokens na blockchain
 * REUTILIZA providers RPC do projeto e estrutura de verifica√ß√£o
 */
async function checkContract() {
    FeedbackSystem.clearContractMessages();
    
    try {
        FeedbackSystem.addContractMessage("üîç Verificando contrato...");
        
        // USAR RPCs do token-global.js se dispon√≠vel
        const rpcUrl = window.rpcFallbacks && window.rpcFallbacks[97] 
            ? window.rpcFallbacks[97][0] 
            : "https://data-seed-prebsc-1-s1.binance.org:8545/";
            
        const publicProvider = new ethers.providers.JsonRpcProvider(rpcUrl);
        
        // Verificar se existe c√≥digo no endere√ßo
        const code = await publicProvider.getCode(CONFIG.contractAddress);
        
        if (code === '0x') {
            FeedbackSystem.addContractMessage("‚ùå PROBLEMA: N√£o existe contrato neste endere√ßo!", 'error');
            FeedbackSystem.addContractMessage("O endere√ßo pode estar incorreto ou o contrato n√£o foi deployed na BSC Testnet.");
            return false;
        } else {
            FeedbackSystem.addContractMessage("‚úÖ Contrato encontrado no endere√ßo.");
        }
        
        // Verificar saldo do contrato em BNB
        const balance = await publicProvider.getBalance(CONFIG.contractAddress);
        FeedbackSystem.addContractMessage(`üí∞ Saldo BNB do contrato: ${ethers.utils.formatEther(balance)} BNB`);
        
        // Verificar conectividade da rede
        const blockNumber = await publicProvider.getBlockNumber();
        FeedbackSystem.addContractMessage(`üì° Bloco atual BSC Testnet: ${blockNumber}`);
        
        // Tentar acessar fun√ß√µes ERC-20 usando fetchTokenData se dispon√≠vel
        try {
            let tokenData;
            
            // TENTAR usar fun√ß√£o global existente primeiro
            if (window.fetchTokenData) {
                tokenData = await window.fetchTokenData(CONFIG.contractAddress, publicProvider);
            } else {
                // Fallback para implementa√ß√£o local
                const tokenContract = new ethers.Contract(CONFIG.contractAddress, CONFIG.tokenABI, publicProvider);
                
                const [name, symbol, totalSupply, contractTokenBalance] = await Promise.all([
                    tokenContract.name(),
                    tokenContract.symbol(),
                    tokenContract.totalSupply(),
                    tokenContract.balanceOf(CONFIG.contractAddress)
                ]);
                
                tokenData = { name, symbol, totalSupply, contractTokenBalance };
            }
            
            // Atualizar interface
            updateTokenInfo(tokenData.name, tokenData.symbol, tokenData.totalSupply, tokenData.contractTokenBalance);
            
            FeedbackSystem.addContractMessage(`‚úÖ Token: ${tokenData.name} (${tokenData.symbol})`);
            FeedbackSystem.addContractMessage(`üìä Total Supply: ${ethers.utils.formatUnits(tokenData.totalSupply, CONFIG.tokenDecimals)} ${tokenData.symbol}`);
            FeedbackSystem.addContractMessage(`ü™ô Tokens dispon√≠veis: ${ethers.utils.formatUnits(tokenData.contractTokenBalance, CONFIG.tokenDecimals)} ${tokenData.symbol}`);
            
            // Verificar disponibilidade para venda
            if (tokenData.contractTokenBalance.gt(0)) {
                FeedbackSystem.addContractMessage("‚úÖ Contrato tem tokens dispon√≠veis para venda.");
            } else {
                FeedbackSystem.addContractMessage("‚ö†Ô∏è ATEN√á√ÉO: Contrato n√£o tem tokens para venda!", 'error');
            }
            
            return true;
            
        } catch (tokenErr) {
            FeedbackSystem.addContractMessage(`‚ö†Ô∏è N√£o foi poss√≠vel acessar fun√ß√µes ERC-20: ${tokenErr.message}`, 'error');
            FeedbackSystem.addContractMessage("O contrato pode n√£o ser um token ERC-20 padr√£o.");
            
            // Resetar displays
            resetTokenInfo();
            return false;
        }
        
    } catch (err) {
        FeedbackSystem.addContractMessage(`‚ùå Erro ao verificar contrato: ${err.message}`, 'error');
        FeedbackSystem.addContractMessage("üí° Pode ser um problema de conectividade com a BSC Testnet.");
        return false;
    }
}

/**
 * Atualiza informa√ß√µes do token na interface
 */
function updateTokenInfo(name, symbol, totalSupply, contractBalance) {
    const elements = {
        tokenName: document.getElementById("tokenName"),
        tokenSymbol: document.getElementById("tokenSymbol"),
        tokenBalance: document.getElementById("tokenBalance")
    };
    
    if (elements.tokenName) elements.tokenName.textContent = name;
    if (elements.tokenSymbol) elements.tokenSymbol.textContent = symbol;
    if (elements.tokenBalance) {
        elements.tokenBalance.textContent = ethers.utils.formatUnits(contractBalance, CONFIG.tokenDecimals);
    }
}

/**
 * Reseta informa√ß√µes do token na interface
 */
function resetTokenInfo() {
    const elements = {
        tokenName: document.getElementById("tokenName"),
        tokenSymbol: document.getElementById("tokenSymbol"),
        tokenBalance: document.getElementById("tokenBalance")
    };
    
    Object.values(elements).forEach(el => {
        if (el) el.textContent = "N/A";
    });
}

// ==================== FUN√á√ïES DE C√ÅLCULO ====================

/**
 * Calcula total da compra em tempo real
 * REUTILIZA formata√ß√£o de n√∫meros do projeto se dispon√≠vel
 */
function calculateTotal() {
    const amount = document.getElementById("tokenAmount").value;
    const calcDiv = document.getElementById("calculationDisplay");
    
    if (amount && amount > 0) {
        const total = parseFloat(amount) * parseFloat(CONFIG.tokenPrice);
        
        // Atualizar elementos de c√°lculo
        const elements = {
            calcTokens: document.getElementById("calcTokens"),
            calcTotal: document.getElementById("calcTotal"),
            availabilityStatus: document.getElementById("availabilityStatus")
        };
        
        // USAR formata√ß√£o do projeto se dispon√≠vel
        if (elements.calcTokens) {
            elements.calcTokens.textContent = window.formatarNumero ? 
                window.formatarNumero(amount) : amount;
        }
        if (elements.calcTotal) {
            elements.calcTotal.textContent = total.toFixed(6) + " BNB";
        }
        
        // Verificar disponibilidade
        checkTokenAvailability(amount, elements.availabilityStatus);
        
        if (calcDiv) calcDiv.style.display = "block";
    } else {
        if (calcDiv) calcDiv.style.display = "none";
    }
}

/**
 * Verifica disponibilidade de tokens
 */
function checkTokenAvailability(requestedAmount, statusElement) {
    const availableText = document.getElementById("tokenBalance").textContent;
    
    if (statusElement) {
        if (availableText !== "-" && availableText !== "Clique em verificar" && !isNaN(parseFloat(availableText))) {
            const available = parseFloat(availableText);
            
            if (parseFloat(requestedAmount) <= available) {
                statusElement.textContent = "‚úÖ Dispon√≠vel";
                statusElement.className = "fw-bold text-success";
            } else {
                statusElement.textContent = "‚ùå Indispon√≠vel";
                statusElement.className = "fw-bold text-danger";
            }
        } else {
            statusElement.textContent = "‚è≥ Verificar contrato";
            statusElement.className = "fw-bold text-warning";
        }
    }
}

// ==================== FUN√á√ïES DE COMPRA ====================

/**
 * Executa a compra de tokens
 * REUTILIZA provider e signer do MetaMaskConnector
 */
async function buyTokens() {
    FeedbackSystem.clearPurchaseMessages();
    
    const amountInput = document.getElementById("tokenAmount").value;
    
    // Valida√ß√µes b√°sicas
    if (!amountInput || amountInput <= 0) {
        FeedbackSystem.addPurchaseMessage("Informe a quantidade de tokens.", 'error');
        return;
    }
    
    if (!currentSigner) {
        FeedbackSystem.addPurchaseMessage("Carteira n√£o conectada.", 'error');
        return;
    }
    
    // Verificar disponibilidade
    const availableText = document.getElementById("tokenBalance").textContent;
    if (availableText !== "-" && availableText !== "Clique em verificar" && !isNaN(parseFloat(availableText))) {
        const available = parseFloat(availableText);
        if (parseFloat(amountInput) > available) {
            FeedbackSystem.addPurchaseMessage(`‚ùå Tokens insuficientes! Dispon√≠vel: ${available.toLocaleString()}, Solicitado: ${amountInput}`, 'error');
            return;
        }
    }
    
    try {
        // Calcular valor em BNB
        const tokenPriceWei = ethers.utils.parseEther(CONFIG.tokenPrice);
        const amountWei = tokenPriceWei.mul(ethers.BigNumber.from(amountInput));
        
        FeedbackSystem.addPurchaseMessage(`üí∞ Valor calculado: ${ethers.utils.formatEther(amountWei)} BNB para ${amountInput} tokens`);
        FeedbackSystem.addPurchaseMessage("üì§ Preparando transa√ß√£o...");
        
        // Executar transa√ß√£o
        const tx = await currentSigner.sendTransaction({
            to: CONFIG.contractAddress,
            value: amountWei,
            gasLimit: CONFIG.gasLimit
        });
        
        FeedbackSystem.addPurchaseMessage("‚è≥ Transa√ß√£o enviada, aguardando confirma√ß√£o...");
        updateTransactionStatus("Transa√ß√£o enviada. Aguarde confirma√ß√£o...");
        
        // Aguardar confirma√ß√£o
        const receipt = await tx.wait();
        
        // Atualizar detalhes da transa√ß√£o
        updateTransactionDetails(tx, receipt, amountWei, amountInput);
        
        FeedbackSystem.addPurchaseMessage(`‚úÖ Transa√ß√£o confirmada no bloco ${receipt.blockNumber}`);
        FeedbackSystem.addPurchaseMessage(`üéâ Voc√™ comprou ${amountInput} tokens!`);
        
        updateTransactionStatus(`‚úÖ Compra conclu√≠da! Hash: ${tx.hash}`);
        
        // Atualizar informa√ß√µes do contrato ap√≥s a transa√ß√£o
        setTimeout(() => {
            FeedbackSystem.addPurchaseMessage("üîÑ Atualizando informa√ß√µes do contrato...");
            checkContract();
        }, 3000);
        
    } catch (err) {
        FeedbackSystem.addPurchaseMessage(`‚ùå Erro na transa√ß√£o: ${err.message}`, 'error');
        
        if (err.reason) {
            FeedbackSystem.addPurchaseMessage(`Motivo: ${err.reason}`);
        }
        if (err.code) {
            FeedbackSystem.addPurchaseMessage(`C√≥digo do erro: ${err.code}`);
        }
        
        // Dicas espec√≠ficas para erros comuns
        if (err.message.includes("insufficient funds")) {
            FeedbackSystem.addPurchaseMessage("üí° Dica: Voc√™ n√£o tem BNB suficiente para a transa√ß√£o + taxas de gas.");
        } else if (err.message.includes("execution reverted")) {
            FeedbackSystem.addPurchaseMessage("üí° Dica: O contrato rejeitou a transa√ß√£o. Verifique se h√° tokens dispon√≠veis.");
        }
    }
}

/**
 * Atualiza status da transa√ß√£o
 */
function updateTransactionStatus(message) {
    const statusEl = document.getElementById("status");
    if (statusEl) {
        statusEl.innerText = message;
    }
}

/**
 * Atualiza detalhes da transa√ß√£o na interface
 */
function updateTransactionDetails(tx, receipt, amountWei, tokenAmount) {
    const elements = {
        txHash: document.getElementById("txHash"),
        txValue: document.getElementById("txValue"),
        txGasPrice: document.getElementById("txGasPrice"),
        txTotalCost: document.getElementById("txTotalCost"),
        txTokensReceived: document.getElementById("txTokensReceived"),
        transactionDetails: document.getElementById("transactionDetails")
    };
    
    if (elements.txHash) elements.txHash.textContent = tx.hash;
    if (elements.txValue) elements.txValue.textContent = ethers.utils.formatEther(amountWei);
    if (elements.txTokensReceived) elements.txTokensReceived.textContent = tokenAmount + " TKN";
    
    // Calcular taxa de gas
    if (receipt.gasUsed && receipt.effectiveGasPrice) {
        const gasFee = receipt.gasUsed.mul(receipt.effectiveGasPrice);
        if (elements.txGasPrice) elements.txGasPrice.textContent = ethers.utils.formatEther(gasFee);
        
        // Calcular total aproximado
        const totalApprox = amountWei.add(gasFee);
        if (elements.txTotalCost) elements.txTotalCost.textContent = ethers.utils.formatEther(totalApprox);
    }
    
    // Mostrar se√ß√£o de detalhes
    if (elements.transactionDetails) {
        elements.transactionDetails.style.display = "block";
    }
}

// ==================== INICIALIZA√á√ÉO ====================

/**
 * Inicializa o m√≥dulo quando o DOM estiver carregado
 * INTEGRA com o sistema existente do projeto
 */
document.addEventListener('DOMContentLoaded', function() {
    // Aguardar carregamento de depend√™ncias globais
    setTimeout(() => {
        // Atualizar display de pre√ßo
        const priceEl = document.getElementById("tokenPriceDisplay");
        if (priceEl) {
            priceEl.textContent = CONFIG.tokenPrice + " BNB";
        }
        
        // Configurar event listeners
        setupEventListeners();
        
        // Log de inicializa√ß√£o usando sistema do projeto se dispon√≠vel
        if (window.CommonUtils && window.CommonUtils.log) {
            window.CommonUtils.log("M√≥dulo de Compra de Tokens inicializado", 'info', 'COMPRA-TOKEN');
        } else {
            console.log("üõí M√≥dulo de Compra de Tokens inicializado");
        }
    }, 500); // Pequeno delay para garantir carregamento das depend√™ncias
});

/**
 * Configura event listeners para os bot√µes
 */
function setupEventListeners() {
    // Bot√£o de verificar contrato
    const checkContractBtn = document.getElementById("checkContract");
    if (checkContractBtn) {
        checkContractBtn.addEventListener("click", checkContract);
    }
    
    // Bot√£o de testar conex√£o
    const testConnectionBtn = document.getElementById("testConnection");
    if (testConnectionBtn) {
        testConnectionBtn.addEventListener("click", connectWallet);
    }
    
    // Bot√£o de comprar
    const buyBtn = document.getElementById("buyButton");
    if (buyBtn) {
        buyBtn.addEventListener("click", async () => {
            try {
                if (!isConnected) {
                    const connected = await connectWallet();
                    if (!connected) return;
                }
                await buyTokens();
            } catch (err) {
                FeedbackSystem.addPurchaseMessage(`Erro inesperado: ${err.message}`, 'error');
            }
        });
    }
    
    // Input de quantidade - c√°lculo em tempo real
    const tokenAmountInput = document.getElementById("tokenAmount");
    if (tokenAmountInput) {
        tokenAmountInput.addEventListener("input", calculateTotal);
    }
}

// ==================== EXPORTS ====================

// Tornar fun√ß√µes dispon√≠veis globalmente para compatibilidade
window.TokenPurchase = {
    connectWallet,
    checkContract,
    buyTokens,
    calculateTotal,
    FeedbackSystem
};

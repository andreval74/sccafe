// Diagn√≥stico R√°pido - Testa todas as funcionalidades do sistema
// Execute: window.diagnosticoRapido() no console para testar tudo

/**
 * Executa diagn√≥stico completo do sistema
 */
function diagnosticoRapido() {
  console.clear();
  console.log('üöÄ DIAGN√ìSTICO R√ÅPIDO DO SISTEMA SCCAFE');
  console.log('==========================================');
  console.log('‚è∞ Iniciado em:', new Date().toLocaleString());
  
  const resultados = {
    timestamp: new Date().toISOString(),
    testes: [],
    funcoes: {},
    status: 'INICIANDO'
  };
  
  // Lista de fun√ß√µes esperadas
  const funcoesEsperadas = [
    // Fun√ß√µes b√°sicas de bytecode
    'analyzeBytecode',
    'compareBytecodes',
    'reverseBytecodeToSolidity',
    
    // Fun√ß√µes de engenharia reversa
    'reverseEngineerContract',
    'compareWithDeployedContract',
    'fetchContractBytecode',
    
    // Fun√ß√µes de decompila√ß√£o
    'decompileBytecodeToSolidity',
    'recreateContractFromAddress',
    'compareWithSimilarContracts',
    
    // Fun√ß√µes de diagn√≥stico
    'diagnoseBytecode',
    'diagnoseBytecodeAdvanced',
    'prepararParaBSCScan',
    
    // Fun√ß√µes de teste
    'executarTestesCompletos',
    'testeCompatibilidadeBSCScan',
    'testeVersaoCompilador',
    
    // Fun√ß√µes do Remix
    'testarContratoRemix',
    'compararComRemix'
  ];
  
  console.log('\nüîç 1. VERIFICA√á√ÉO DE FUN√á√ïES DISPON√çVEIS');
  console.log('==========================================');
  
  let funcoesOK = 0;
  let funcoesERRO = 0;
  
  for (const funcao of funcoesEsperadas) {
    if (typeof window[funcao] === 'function') {
      console.log(`‚úÖ ${funcao}: DISPON√çVEL`);
      resultados.funcoes[funcao] = 'OK';
      funcoesOK++;
    } else {
      console.log(`‚ùå ${funcao}: N√ÉO ENCONTRADA`);
      resultados.funcoes[funcao] = 'ERRO';
      funcoesERRO++;
    }
  }
  
  console.log(`\nüìä Fun√ß√µes: ${funcoesOK} OK, ${funcoesERRO} com problema`);
  
  // Teste 2: Verifica√ß√£o de dados existentes
  console.log('\nüìã 2. VERIFICA√á√ÉO DE DADOS EXISTENTES');
  console.log('==========================================');
  
  const dadosEsperados = [
    { nome: 'contratoSource', var: 'contratoSource' },
    { nome: 'contratoAbi', var: 'contratoAbi' },
    { nome: 'contratoBytecode', var: 'contratoBytecode' },
    { nome: 'creationBytecode', var: 'creationBytecode' },
    { nome: 'runtimeBytecode', var: 'runtimeBytecode' },
    { nome: 'contratoName', var: 'contratoName' },
    { nome: 'resolvedCompilerVersion', var: 'resolvedCompilerVersion' }
  ];
  
  for (const dado of dadosEsperados) {
    const valor = window[dado.var];
    if (valor) {
      console.log(`‚úÖ ${dado.nome}: DISPON√çVEL (${typeof valor === 'string' ? valor.length + ' chars' : typeof valor})`);
    } else {
      console.log(`‚ö†Ô∏è ${dado.nome}: N√ÉO DISPON√çVEL`);
    }
  }
  
  // Teste 3: Testes funcionais b√°sicos
  console.log('\nüß™ 3. TESTES FUNCIONAIS B√ÅSICOS');
  console.log('==========================================');
  
  // Teste analyzeBytecode
  try {
    if (window.analyzeBytecode) {
      const bytecodeTest = '0x608060405234801561001057600080fd5b50';
      const resultado = window.analyzeBytecode(bytecodeTest);
      console.log('‚úÖ analyzeBytecode: FUNCIONANDO');
      resultados.testes.push({ nome: 'analyzeBytecode', status: 'OK' });
    }
  } catch (error) {
    console.log('‚ùå analyzeBytecode: ERRO -', error.message);
    resultados.testes.push({ nome: 'analyzeBytecode', status: 'ERRO', erro: error.message });
  }
  
  // Teste compareBytecodes
  try {
    if (window.compareBytecodes) {
      const bytecode1 = '0x608060405234801561001057600080fd5b50';
      const bytecode2 = '0x608060405234801561001057600080fd5b51';
      const resultado = window.compareBytecodes(bytecode1, bytecode2);
      console.log('‚úÖ compareBytecodes: FUNCIONANDO');
      resultados.testes.push({ nome: 'compareBytecodes', status: 'OK' });
    }
  } catch (error) {
    console.log('‚ùå compareBytecodes: ERRO -', error.message);
    resultados.testes.push({ nome: 'compareBytecodes', status: 'ERRO', erro: error.message });
  }
  
  // Teste diagn√≥stico se houver bytecode
  try {
    if (window.diagnoseBytecode && (window.creationBytecode || window.contratoBytecode)) {
      window.diagnoseBytecode();
      console.log('‚úÖ diagnoseBytecode: FUNCIONANDO');
      resultados.testes.push({ nome: 'diagnoseBytecode', status: 'OK' });
    } else if (window.diagnoseBytecode) {
      console.log('‚ö†Ô∏è diagnoseBytecode: SEM DADOS PARA TESTAR');
      resultados.testes.push({ nome: 'diagnoseBytecode', status: 'SEM_DADOS' });
    }
  } catch (error) {
    console.log('‚ùå diagnoseBytecode: ERRO -', error.message);
    resultados.testes.push({ nome: 'diagnoseBytecode', status: 'ERRO', erro: error.message });
  }
  
  // Teste 4: An√°lise da vers√£o do compilador
  console.log('\nüîß 4. AN√ÅLISE DO COMPILADOR');
  console.log('==========================================');
  
  const versaoEsperada = '0.8.30';
  const versaoAtual = window.resolvedCompilerVersion || window.compilerVersion;
  
  if (versaoAtual === versaoEsperada) {
    console.log(`‚úÖ Vers√£o do compilador: ${versaoAtual} (CORRETO)`);
  } else {
    console.log(`‚ö†Ô∏è Vers√£o do compilador: ${versaoAtual || 'N√£o definida'} (ESPERADO: ${versaoEsperada})`);
  }
  
  // Teste 5: Verifica√ß√£o de depend√™ncias externas
  console.log('\nüì¶ 5. VERIFICA√á√ÉO DE DEPEND√äNCIAS');
  console.log('==========================================');
  
  const dependencias = [
    { nome: 'ethers', obj: 'ethers' },
    { nome: 'MetaMask', obj: 'ethereum' }
  ];
  
  for (const dep of dependencias) {
    if (window[dep.obj]) {
      console.log(`‚úÖ ${dep.nome}: DISPON√çVEL`);
    } else {
      console.log(`‚ùå ${dep.nome}: N√ÉO DISPON√çVEL`);
    }
  }
  
  // Resumo final
  console.log('\nüìä RESUMO DO DIAGN√ìSTICO');
  console.log('==========================================');
  
  const testesOK = resultados.testes.filter(t => t.status === 'OK').length;
  const testesERRO = resultados.testes.filter(t => t.status === 'ERRO').length;
  const testesSemDados = resultados.testes.filter(t => t.status === 'SEM_DADOS').length;
  
  console.log(`‚úÖ Fun√ß√µes dispon√≠veis: ${funcoesOK}/${funcoesEsperadas.length}`);
  console.log(`üß™ Testes funcionais: ${testesOK} OK, ${testesERRO} com erro, ${testesSemDados} sem dados`);
  
  if (funcoesERRO === 0 && testesERRO === 0) {
    console.log('üéâ SISTEMA FUNCIONANDO PERFEITAMENTE!');
    resultados.status = 'OK';
  } else if (testesERRO === 0) {
    console.log('üîß SISTEMA OK - Algumas fun√ß√µes n√£o carregadas');
    resultados.status = 'OK_COM_AVISOS';
  } else {
    console.log('‚ö†Ô∏è SISTEMA COM PROBLEMAS - Verificar erros acima');
    resultados.status = 'COM_PROBLEMAS';
  }
  
  // Recomenda√ß√µes
  console.log('\nüí° RECOMENDA√á√ïES');
  console.log('==========================================');
  
  if (funcoesERRO > 0) {
    console.log('üîß Algumas fun√ß√µes n√£o foram carregadas. Verifique os scripts.');
  }
  
  if (!window.contratoSource) {
    console.log('üìù Para testes completos, compile um contrato primeiro.');
  }
  
  if (versaoAtual !== versaoEsperada) {
    console.log('üîÑ Atualize a vers√£o do compilador para 0.8.30.');
  }
  
  if (!window.ethereum) {
    console.log('ü¶ä Conecte o MetaMask para funcionalidades avan√ßadas.');
  }
  
  console.log('\n‚úÖ Diagn√≥stico conclu√≠do!');
  console.log('üíæ Resultados salvos em window.diagnosticoResultados');
  
  // Salva resultados globalmente
  window.diagnosticoResultados = resultados;
  
  return resultados;
}

/**
 * Executa apenas teste de fun√ß√µes b√°sicas
 */
function testeFuncoesSimpples() {
  console.log('üîß TESTE SIMPLES DE FUN√á√ïES');
  console.log('==========================================');
  
  const funcoes = ['analyzeBytecode', 'compareBytecodes', 'diagnoseBytecode'];
  
  for (const funcao of funcoes) {
    if (typeof window[funcao] === 'function') {
      console.log(`‚úÖ ${funcao}: OK`);
    } else {
      console.log(`‚ùå ${funcao}: N√ÉO ENCONTRADA`);
    }
  }
}

/**
 * Executa teste com bytecode de exemplo
 */
function testeComBytecodeExemplo() {
  console.log('üìù TESTE COM BYTECODE DE EXEMPLO');
  console.log('==========================================');
  
  // Simula dados de contrato
  window.creationBytecode = '0x608060405234801561001057600080fd5b5033600073ffffffffffffffffffffffffffffffffffffffff168160008190555050600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561007f57600080fd5b565b60008054905090565b';
  
  window.runtimeBytecode = '0x60806040526004361061004c576000357c010000000000000000000000000000000000000000000000000000000090048063893d20e81461005157806395d89b411461007c578063a9059cbb146100a7575b600080fd5b';
  
  window.contratoName = 'TestToken';
  window.resolvedCompilerVersion = '0.8.30';
  
  console.log('‚úÖ Dados de exemplo criados');
  
  if (window.diagnoseBytecode) {
    window.diagnoseBytecode();
  }
  
  if (window.analyzeBytecode) {
    window.analyzeBytecode(window.creationBytecode);
  }
}

// Exp√µe fun√ß√µes globalmente
if (typeof window !== 'undefined') {
  window.diagnosticoRapido = diagnosticoRapido;
  window.testeFuncoesSimpples = testeFuncoesSimpples;
  window.testeComBytecodeExemplo = testeComBytecodeExemplo;
  
  console.log('üöÄ Diagn√≥stico r√°pido carregado!');
  console.log('üí° Execute: window.diagnosticoRapido() para testar tudo');
  console.log('üîß Execute: window.testeFuncoesSimpples() para teste b√°sico');
  console.log('üìù Execute: window.testeComBytecodeExemplo() para teste com dados');
}

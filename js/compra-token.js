/**
 * üõí COMPRA DE TOKENS DIN√ÇMICA - M√ìDULO ESPEC√çFICO
 * 
 * üìç RESPONSABILIDADES:
 * - Interface din√¢mica para compra de tokens via MetaMask
 * - Verifica√ß√£o de conex√£o e habilita√ß√£o de campos
 * - Leitura din√¢mica de contratos da blockchain
 * - Verifica√ß√£o de compatibilidade para compra direta
 * - C√°lculo din√¢mico de pre√ßos e execu√ß√£o de transa√ß√µes
 * 
 * üîó DEPEND√äNCIAS:
 * - ethers.js v5.7.2
 * - MetaMaskConnector (shared/metamask-connector.js) - REUTILIZADO
 * - CommonUtils (shared/common-utils.js) - REUTILIZADO
 * - TokenGlobal (shared/token-global.js) - REUTILIZADO
 * 
 * üì§ EXPORTS:
 * - DynamicTokenPurchase: Classe principal
 * - Fun√ß√µes utilit√°rias espec√≠ficas de compra din√¢mica
 */

// ==================== CONFIGURA√á√ïES ====================

const CONFIG = {
    // Configura√ß√µes din√¢micas (sem contrato fixo)
    defaultTokenPrice: "0.001", // BNB por token (padr√£o)
    supportedChains: [56, 97], // BSC Mainnet e Testnet
    
    // ABI estendido para verifica√ß√£o completa e diagn√≥stico
    tokenABI: [
        // Fun√ß√µes b√°sicas ERC-20
        "function balanceOf(address owner) view returns (uint256)",
        "function totalSupply() view returns (uint256)",
        "function name() view returns (string)",
        "function symbol() view returns (string)",
        "function decimals() view returns (uint8)",
        "function transfer(address to, uint256 amount) returns (bool)",
        
        // Fun√ß√µes para verificar compra direta (expandido)
        "function buy() payable",
        "function buy(uint256 amount) payable",
        "function buyTokens() payable",
        "function buyTokens(uint256 amount) payable",
        "function purchase() payable",
        "function purchase(uint256 amount) payable",
        
        // Fun√ß√µes para detectar pre√ßo (expandido)
        "function tokenPrice() view returns (uint256)",
        "function price() view returns (uint256)",
        "function getPrice() view returns (uint256)",
        "function buyPrice() view returns (uint256)",
        "function tokenCost() view returns (uint256)",
        "function cost() view returns (uint256)",
        "function salePrice() view returns (uint256)",
        "function pricePerToken() view returns (uint256)",
        
        // Fun√ß√µes para diagn√≥stico avan√ßado
        "function owner() view returns (address)",
        "function paused() view returns (bool)",
        "function saleActive() view returns (bool)",
        "function saleEnabled() view returns (bool)",
        "function maxPurchase() view returns (uint256)",
        "function minPurchase() view returns (uint256)",
        "function tokensForSale() view returns (uint256)",
        "function tokensAvailable() view returns (uint256)",
        "function isWhitelisted(address) view returns (bool)",
        "function purchaseLimit(address) view returns (uint256)",
        "function hasPurchased(address) view returns (bool)",
        
        // Fun√ß√µes de c√°lculo espec√≠ficas
        "function calculateTokensForEth(uint256 ethAmount) view returns (uint256)",
        "function calculateEthForTokens(uint256 tokenAmount) view returns (uint256)",
        "function getTokensForEth(uint256 ethAmount) view returns (uint256)",
        "function getEthForTokens(uint256 tokenAmount) view returns (uint256)"
    ],
    
    // Configura√ß√µes de gas
    gasLimit: 200000,
    gasPrice: "5000000000" // 5 gwei
};

// ==================== ESTADO GLOBAL ====================

let currentProvider = null;
let currentSigner = null;
let walletConnected = false;
let walletAddress = '';
let networkData = {};
let currentContract = null;
let tokenInfo = {};
let buyFunctionName = null;

// ==================== INICIALIZA√á√ÉO ====================

/**
 * Inicializa√ß√£o principal
 */
document.addEventListener('DOMContentLoaded', function() {
    console.log('üõí Sistema de Compra Din√¢mica iniciado');
    
    // üîí GARANTIA: Se√ß√£o de compra inicia OCULTA at√© valida√ß√£o completa
    ensurePurchaseSectionHidden();
    
    initializeWalletConnection();
    setupEventListeners();
    checkInitialWalletState();
});

/**
 * Garante que a se√ß√£o de compra inicie oculta
 */
function ensurePurchaseSectionHidden() {
    const section = document.getElementById('purchase-section');
    const purchaseBtn = document.getElementById('execute-purchase-btn');
    const quantityInput = document.getElementById('token-quantity');
    
    if (section) {
        section.style.display = 'none';
        console.log('üîí Se√ß√£o de compra garantidamente OCULTA no in√≠cio');
    }
    
    if (purchaseBtn) {
        purchaseBtn.disabled = true;
        purchaseBtn.style.opacity = '0.5';
        purchaseBtn.style.cursor = 'not-allowed';
    }
    
    if (quantityInput) {
        quantityInput.disabled = true;
    }
    
    console.log('üîí Estado inicial: Se√ß√£o de compra BLOQUEADA at√© valida√ß√£o do contrato');
}

/**
 * Verifica estado inicial da wallet (sem tentar conectar)
 */
async function checkInitialWalletState() {
    if (typeof window.ethereum !== 'undefined') {
        try {
            // Apenas verifica se j√° est√° conectado, sem solicitar
            const accounts = await window.ethereum.request({
                method: 'eth_accounts'
            });
            
            if (accounts.length > 0) {
                walletAddress = accounts[0];
                walletConnected = true;
                await detectNetwork();
                updateWalletUI();
            }
        } catch (error) {
            console.log('Wallet n√£o conectada previamente');
        }
    }
}

/**
 * Configura event listeners
 */
function setupEventListeners() {
    // Conex√£o MetaMask
    const connectBtn = document.getElementById('connect-metamask-btn');
    if (connectBtn) {
        connectBtn.addEventListener('click', connectWallet);
    }
    
    // Verifica√ß√£o de contrato
    const verifyBtn = document.getElementById('verify-contract-btn');
    if (verifyBtn) {
        verifyBtn.addEventListener('click', verifyContract);
    }
    
    // Campo de endere√ßo do contrato
    const contractInput = document.getElementById('contract-address');
    if (contractInput) {
        contractInput.addEventListener('input', validateContractAddress);
    }
    
    // Campos de compra
    const quantityInput = document.getElementById('token-quantity');
    
    if (quantityInput) {
        quantityInput.addEventListener('input', calculateTotal);
    }
    
    // PRE√áO √â READ-ONLY - removido listener pois √© detectado do contrato
    // O campo de pre√ßo n√£o deve ser edit√°vel pelo usu√°rio
    
    // Bot√£o de compra
    const purchaseBtn = document.getElementById('execute-purchase-btn');
    if (purchaseBtn) {
        purchaseBtn.addEventListener('click', executePurchase);
        console.log('‚úÖ Event listener configurado para bot√£o de compra');
    } else {
        console.error('‚ùå Bot√£o de compra n√£o encontrado ao configurar listeners');
    }
}

// ==================== GERENCIAMENTO DE WALLET ====================

/**
 * Conecta com a MetaMask
 */
async function connectWallet() {
    try {
        if (typeof window.ethereum === 'undefined') {
            alert('MetaMask n√£o detectado! Por favor, instale a MetaMask.');
            return;
        }
        
        console.log('üîó Conectando com MetaMask...');
        
        // Solicita conex√£o
        const accounts = await window.ethereum.request({
            method: 'eth_requestAccounts'
        });
        
        if (accounts.length > 0) {
            walletAddress = accounts[0];
            walletConnected = true;
            
            // Atualiza UI
            await detectNetwork();
            updateWalletUI();
            
            console.log('‚úÖ Wallet conectada:', walletAddress);
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao conectar wallet:', error);
        alert('Erro ao conectar com a MetaMask: ' + error.message);
    }
}

/**
 * Atualiza interface da wallet
 */
function updateWalletUI() {
    const statusInput = document.getElementById('wallet-status');
    const connectBtn = document.getElementById('connect-metamask-btn');
    const networkSection = document.getElementById('network-info-section');
    
    if (walletConnected && walletAddress) {
        // Status da wallet
        if (statusInput) {
            statusInput.value = `${walletAddress.slice(0, 6)}...${walletAddress.slice(-4)}`;
            statusInput.classList.add('text-success');
        }
        
        // Bot√£o conectar
        if (connectBtn) {
            connectBtn.innerHTML = '<i class="bi bi-check-circle"></i> CONECTADO';
            connectBtn.classList.remove('btn-warning');
            connectBtn.classList.add('btn-success');
            connectBtn.disabled = true;
        }
        
        // Mostra info da rede
        if (networkSection) {
            networkSection.style.display = 'block';
        }
        
        // Habilita se√ß√£o de contrato apenas ap√≥s conex√£o
        enableContractSection();
    }
}

/**
 * Detecta a rede atual
 */
async function detectNetwork() {
    try {
        const chainId = await window.ethereum.request({
            method: 'eth_chainId'
        });
        
        networkData = getNetworkInfo(chainId);
        
        // Atualiza UI da rede
        const currentNetworkSpan = document.getElementById('current-network');
        const chainIdSpan = document.getElementById('chain-id-value');
        
        if (currentNetworkSpan) {
            currentNetworkSpan.textContent = networkData.name;
        }
        
        if (chainIdSpan) {
            chainIdSpan.textContent = networkData.chainId;
        }
        
        console.log('üåê Rede detectada:', networkData);
        
    } catch (error) {
        console.error('‚ùå Erro ao detectar rede:', error);
    }
}

/**
 * Obt√©m informa√ß√µes da rede baseado no chainId
 */
function getNetworkInfo(chainId) {
    const networks = {
        '0x38': { name: 'BSC Mainnet', chainId: '56' },
        '0x61': { name: 'BSC Testnet', chainId: '97' },
        '0x1': { name: 'Ethereum Mainnet', chainId: '1' },
        '0x89': { name: 'Polygon Mainnet', chainId: '137' },
        '0xaa36a7': { name: 'Sepolia Testnet', chainId: '11155111' }
    };
    
    return networks[chainId] || { 
        name: 'Rede Desconhecida', 
        chainId: parseInt(chainId, 16).toString() 
    };
}

// ==================== GERENCIAMENTO DE CONTRATO ====================

/**
 * Habilita se√ß√£o de contrato ap√≥s conex√£o
 */
function enableContractSection() {
    // Mostra a se√ß√£o de contrato
    const contractSection = document.getElementById('contract-section');
    if (contractSection) {
        contractSection.style.display = 'block';
        
        // Adiciona anima√ß√£o de slide down
        contractSection.style.opacity = '0';
        contractSection.style.transform = 'translateY(-20px)';
        
        setTimeout(() => {
            contractSection.style.transition = 'all 0.3s ease-in-out';
            contractSection.style.opacity = '1';
            contractSection.style.transform = 'translateY(0)';
        }, 100);
    }
    
    // Habilita campos
    const contractInput = document.getElementById('contract-address');
    const verifyBtn = document.getElementById('verify-contract-btn');
    
    if (contractInput) {
        contractInput.disabled = false;
        contractInput.placeholder = "0x1234567890123456789012345678901234567890";
        contractInput.classList.add('border-success');
    }
    
    if (verifyBtn) {
        verifyBtn.disabled = false;
    }
    
    console.log('‚úÖ Se√ß√£o de contrato habilitada ap√≥s conex√£o');
}

/**
 * Valida endere√ßo do contrato
 */
function validateContractAddress() {
    const contractInput = document.getElementById('contract-address');
    const verifyBtn = document.getElementById('verify-contract-btn');
    
    if (contractInput && verifyBtn) {
        const address = contractInput.value.trim();
        
        // Verifica se √© um endere√ßo v√°lido (42 caracteres, come√ßando com 0x)
        const isValid = address.length === 42 && address.startsWith('0x');
        
        if (isValid) {
            contractInput.classList.remove('is-invalid');
            contractInput.classList.add('is-valid');
            verifyBtn.disabled = false;
        } else {
            contractInput.classList.remove('is-valid');
            if (address.length > 0) {
                contractInput.classList.add('is-invalid');
            }
            verifyBtn.disabled = true;
        }
    }
}

/**
 * Verifica o contrato na blockchain
 */
async function verifyContract() {
    const contractInput = document.getElementById('contract-address');
    const contractAddress = contractInput.value.trim();
    
    if (!contractAddress) {
        alert('Por favor, digite o endere√ßo do contrato');
        return;
    }
    
    if (!ethers.utils.isAddress(contractAddress)) {
        alert('Endere√ßo do contrato inv√°lido. Verifique o formato.');
        return;
    }
    
    try {
        // Mostra loading
        updateVerifyButton(true);
        clearContractMessages();
        hideTokenInfo();
        
        addContractMessage('üîç Verificando contrato na blockchain...', 'info');
        
        // Inicializa provider com fallback para resolver problemas de RPC
        currentProvider = await initializeProviderWithFallback();
        currentSigner = currentProvider.getSigner();
        
        // **MELHORIA 1: Verifica√ß√£o robusta se contrato existe**
        addContractMessage('üîç Verificando se √© um smart contract...', 'info');
        const code = await currentProvider.getCode(contractAddress);
        if (code === '0x') {
            throw new Error('Contrato n√£o existe neste endere√ßo. Verifique se foi deployado corretamente.');
        }
        
        addContractMessage(`‚úÖ Contrato detectado no endere√ßo: ${contractAddress.slice(0,6)}...${contractAddress.slice(-4)}`, 'success');
        
        // Armazena endere√ßo validado
        CONFIG.contractAddress = contractAddress;
        
        // **MELHORIA 2: Criar inst√¢ncia do contrato**
        currentContract = new ethers.Contract(contractAddress, CONFIG.tokenABI, currentProvider);
        
        // **MELHORIA 3: Verificar fun√ß√µes b√°sicas ERC-20 com melhor tratamento de erro**
        await verifyERC20Functions();
        
        // Verifica fun√ß√µes de compra
        await verifyBuyFunctions();
        
        // Mostra informa√ß√µes do token
        await loadTokenInfo();
        showTokenInfo();
        
        addContractMessage('üéâ Contrato verificado com sucesso!', 'success');
    }     
    
    catch (error) {
        console.error('‚ùå Erro ao verificar contrato:', error);
        
        // Se for erro de RPC, oferece alternativa
        if (error.message?.includes('JSON-RPC') || error.code === -32603) {
            addContractMessage('‚ö†Ô∏è Problema de conectividade detectado', 'warning');
            addContractMessage('üîÑ Tentando com provider alternativo...', 'info');
            
            try {
                await retryWithFallbackProvider(contractAddress);
            } catch (fallbackError) {
                addContractMessage(`‚ùå Erro mesmo com provider alternativo: ${fallbackError.message}`, 'error');
            }
        } else {
            addContractMessage(`‚ùå Erro: ${error.message}`, 'error');
        }
    } finally {
        updateVerifyButton(false);
    }
}

/**
 * Verifica fun√ß√µes b√°sicas ERC-20 com melhor diagn√≥stico
 */
async function verifyERC20Functions() {
    addContractMessage('üìù Teste 1: Verificando ERC-20...', 'info');
    
    try {
        // **MELHORIA: Verificar cada fun√ß√£o individualmente para melhor diagn√≥stico**
        const name = await currentContract.name();
        const symbol = await currentContract.symbol(); 
        const decimals = await currentContract.decimals();
        const totalSupply = await currentContract.totalSupply();
        
        // Armazenar informa√ß√µes do token
        tokenInfo = {
            name,
            symbol,
            decimals: parseInt(decimals),
            totalSupply: totalSupply.toString()
        };
        
        updateCompatibilityStatus('erc20Status', '‚úÖ Compat√≠vel', 'success');
        updateCompatibilityStatus('transferStatus', '‚úÖ Detectada', 'success');
        addContractMessage(`‚úÖ Token: ${name} (${symbol}) - ${decimals} decimais`, 'success');
        
    } catch (error) {
        updateCompatibilityStatus('erc20Status', `‚ùå Incompat√≠vel - ${error.message}`, 'error');
        updateCompatibilityStatus('transferStatus', '‚ùå N√£o detectada', 'error');
        addContractMessage(`‚ùå Erro ERC-20: ${error.message}`, 'error');
        throw new Error('Contrato n√£o √© ERC-20 compat√≠vel');
    }
}

/**
 * üîç DIAGN√ìSTICO PROFUNDO: Identifica exatamente por que o contrato rejeita transa√ß√µes
 */
async function performDeepContractAnalysis(contractAddress, buyFunctionName) {
    console.log('üî¨ INICIANDO DIAGN√ìSTICO PROFUNDO DO CONTRATO...');
    
    try {
        // 1. Verifica√ß√µes b√°sicas do estado do contrato
        const basicChecks = await performBasicContractChecks();
        
        // 2. Testa diferentes cen√°rios de chamada
        const callTests = await performCallTests(buyFunctionName);
        
        // 3. Analisa condi√ß√µes espec√≠ficas
        const conditions = await analyzeContractConditions();
        
        // 4. Gera relat√≥rio final
        const isReady = generateReadinessReport(basicChecks, callTests, conditions);
        
        return isReady;
        
    } catch (error) {
        console.log('‚ùå Erro no diagn√≥stico profundo:', error.message);
        return false;
    }
}

/**
 * 1Ô∏è‚É£ Verifica√ß√µes b√°sicas do estado do contrato
 */
async function performBasicContractChecks() {
    console.log('üîç 1Ô∏è‚É£ Verifica√ß√µes b√°sicas do estado...');
    
    const checks = {
        contractExists: false,
        hasTokens: false,
        hasBalance: false,
        isPaused: null,
        saleActive: null,
        owner: null
    };
    
    try {
        // Verifica se o contrato existe
        const code = await currentProvider.getCode(CONFIG.contractAddress);
        checks.contractExists = code !== '0x';
        console.log(`üìã Contrato existe: ${checks.contractExists}`);
        
        // Verifica tokens no contrato
        try {
            const tokenBalance = await currentContract.balanceOf(CONFIG.contractAddress);
            const tokens = parseFloat(ethers.utils.formatUnits(tokenBalance, tokenInfo.decimals || 18));
            checks.hasTokens = tokens > 0;
            console.log(`üìã Tokens no contrato: ${tokens} (${checks.hasTokens ? 'OK' : 'ZERO'})`);
        } catch (e) {
            console.log('üìã N√£o foi poss√≠vel verificar tokens no contrato');
        }
        
        // Verifica se est√° pausado
        try {
            checks.isPaused = await currentContract.paused();
            console.log(`üìã Contrato pausado: ${checks.isPaused}`);
        } catch (e) {
            console.log('üìã Fun√ß√£o paused() n√£o dispon√≠vel');
        }
        
        // Verifica se venda est√° ativa
        const saleChecks = ['saleActive', 'saleEnabled', 'isActive', 'enabled'];
        for (const funcName of saleChecks) {
            try {
                checks.saleActive = await currentContract[funcName]();
                console.log(`üìã ${funcName}(): ${checks.saleActive}`);
                break;
            } catch (e) {
                // Fun√ß√£o n√£o existe
            }
        }
        
        // Verifica owner
        try {
            checks.owner = await currentContract.owner();
            console.log(`üìã Owner: ${checks.owner}`);
        } catch (e) {
            console.log('üìã Fun√ß√£o owner() n√£o dispon√≠vel');
        }
        
        return checks;
        
    } catch (error) {
        console.log('‚ùå Erro nas verifica√ß√µes b√°sicas:', error.message);
        return checks;
    }
}

/**
 * 2Ô∏è‚É£ Testa diferentes cen√°rios de chamada
 */
async function performCallTests(buyFunctionName) {
    console.log('üîç 2Ô∏è‚É£ Testando cen√°rios de chamada...');
    
    const tests = {
        withoutValue: false,
        withSmallValue: false,
        withCorrectPrice: false,
        withParameters: false,
        gasEstimation: null
    };
    
    try {
        // Teste 1: Sem valor (para verificar se fun√ß√£o √© realmente payable)
        try {
            await currentContract.callStatic[buyFunctionName]();
            tests.withoutValue = true;
            console.log('‚úÖ Teste sem valor: PASSOU (fun√ß√£o pode n√£o ser payable)');
        } catch (e) {
            console.log(`‚ùå Teste sem valor: ${e.reason || e.message}`);
        }
        
        // Teste 2: Com valor pequeno
        try {
            await currentContract.callStatic[buyFunctionName]({ value: ethers.utils.parseEther('0.001') });
            tests.withSmallValue = true;
            console.log('‚úÖ Teste valor pequeno: PASSOU');
        } catch (e) {
            console.log(`‚ùå Teste valor pequeno: ${e.reason || e.message}`);
        }
        
        // Teste 3: Tentativa de estimativa de gas
        try {
            tests.gasEstimation = await currentContract.estimateGas[buyFunctionName]({ value: ethers.utils.parseEther('0.001') });
            console.log(`üìã Estimativa de gas: ${tests.gasEstimation.toString()}`);
        } catch (e) {
            console.log(`‚ùå Estimativa de gas: ${e.reason || e.message}`);
        }
        
        return tests;
        
    } catch (error) {
        console.log('‚ùå Erro nos testes de chamada:', error.message);
        return tests;
    }
}

/**
 * 3Ô∏è‚É£ Analisa condi√ß√µes espec√≠ficas do contrato
 */
async function analyzeContractConditions() {
    console.log('üîç 3Ô∏è‚É£ Analisando condi√ß√µes espec√≠ficas...');
    
    const conditions = {
        hasWhitelist: false,
        hasMinMax: false,
        hasCooldown: false,
        requiresApproval: false
    };
    
    try {
        // Verifica whitelist
        try {
            await currentContract.isWhitelisted(walletAddress);
            conditions.hasWhitelist = true;
            console.log('üìã Contrato usa whitelist');
        } catch (e) {
            console.log('üìã Contrato n√£o usa whitelist');
        }
        
        // Verifica limites
        const limitFunctions = ['minPurchase', 'maxPurchase', 'purchaseLimit'];
        for (const func of limitFunctions) {
            try {
                const limit = await currentContract[func](walletAddress || '0x0000000000000000000000000000000000000000');
                if (limit.gt(0)) {
                    conditions.hasMinMax = true;
                    console.log(`üìã ${func}: ${ethers.utils.formatEther(limit)} BNB`);
                }
            } catch (e) {
                // Fun√ß√£o n√£o existe
            }
        }
        
        return conditions;
        
    } catch (error) {
        console.log('‚ùå Erro na an√°lise de condi√ß√µes:', error.message);
        return conditions;
    }
}

/**
 * 4Ô∏è‚É£ Gera relat√≥rio final de prontid√£o
 */
function generateReadinessReport(basicChecks, callTests, conditions) {
    console.log('üîç 4Ô∏è‚É£ Gerando relat√≥rio de prontid√£o...');
    
    let score = 0;
    let maxScore = 0;
    const issues = [];
    
    // Avalia√ß√£o b√°sica
    maxScore += 10;
    if (basicChecks.contractExists) score += 10;
    else issues.push('‚ùå CR√çTICO: Contrato n√£o existe no endere√ßo informado');
    
    // Avalia√ß√£o de estado
    if (basicChecks.isPaused === true) {
        issues.push('‚ö†Ô∏è BLOQUEADOR: Contrato est√° PAUSADO');
    } else if (basicChecks.isPaused === false) {
        score += 5;
    }
    maxScore += 5;
    
    if (basicChecks.saleActive === true) {
        score += 5;
    } else if (basicChecks.saleActive === false) {
        issues.push('‚ö†Ô∏è BLOQUEADOR: Venda n√£o est√° ATIVA');
    }
    maxScore += 5;
    
    // Avalia√ß√£o de tokens
    if (basicChecks.hasTokens) {
        score += 3;
    } else {
        issues.push('‚ö†Ô∏è AVISO: Contrato n√£o tem tokens (pode usar mint)');
    }
    maxScore += 3;
    
    // Avalia√ß√£o de testes
    if (callTests.withoutValue || callTests.withSmallValue) {
        score += 7;
    } else {
        issues.push('‚ùå CR√çTICO: Fun√ß√£o n√£o aceita chamadas de teste');
    }
    maxScore += 7;
    
    const readinessPercent = Math.round((score / maxScore) * 100);
    const isReady = score >= (maxScore * 0.7); // 70% de prontid√£o m√≠nima
    
    console.log(`üìä RELAT√ìRIO DE PRONTID√ÉO: ${readinessPercent}% (${score}/${maxScore})`);
    console.log(`üéØ Status: ${isReady ? '‚úÖ PRONTO PARA NEGOCIA√á√ÉO' : '‚ùå N√ÉO PRONTO'}`);
    
    if (issues.length > 0) {
        console.log('üö® PROBLEMAS IDENTIFICADOS:');
        issues.forEach(issue => console.log(`   ${issue}`));
    }
    
    // Atualiza UI com o resultado
    updateReadinessUI(readinessPercent, isReady, issues);
    
    return isReady;
}

/**
 * üéØ Atualiza UI com resultado da an√°lise de prontid√£o
 */
function updateReadinessUI(readinessPercent, isReady, issues) {
    // Cria ou atualiza se√ß√£o de status de prontid√£o
    let readinessSection = document.getElementById('readiness-status');
    if (!readinessSection) {
        // Cria se√ß√£o se n√£o existe
        const contractSection = document.querySelector('#contract-section .card-body');
        if (contractSection) {
            readinessSection = document.createElement('div');
            readinessSection.id = 'readiness-status';
            readinessSection.className = 'mt-3 p-3 border rounded';
            contractSection.appendChild(readinessSection);
        }
    }
    
    if (readinessSection) {
        const statusColor = isReady ? 'success' : 'danger';
        const statusIcon = isReady ? '‚úÖ' : '‚ùå';
        const statusText = isReady ? 'PRONTO PARA NEGOCIA√á√ÉO' : 'PROBLEMAS IDENTIFICADOS';
        
        readinessSection.innerHTML = `
            <div class="d-flex align-items-center mb-2">
                <div class="flex-grow-1">
                    <h6 class="text-${statusColor} mb-0">${statusIcon} Status de Prontid√£o: ${readinessPercent}%</h6>
                    <small class="text-${statusColor}">${statusText}</small>
                </div>
                <div class="progress" style="width: 120px; height: 8px;">
                    <div class="progress-bar bg-${statusColor}" style="width: ${readinessPercent}%"></div>
                </div>
            </div>
            ${issues.length > 0 ? `
                <div class="alert alert-warning alert-sm mb-0">
                    <small><strong>Problemas encontrados:</strong></small>
                    <ul class="mb-0 mt-1" style="font-size: 0.875em;">
                        ${issues.map(issue => `<li>${issue}</li>`).join('')}
                    </ul>
                </div>
            ` : ''}
        `;
        
        readinessSection.className = `mt-3 p-3 border border-${statusColor} rounded bg-${statusColor} bg-opacity-10`;
    }
}

async function testActualPayableFunctions() {
    console.log('üéØ TESTE DIRETO: Validando fun√ß√µes PAYABLE do ABI...');
    
    try {
        const contractInterface = currentContract.interface;
        const allFunctions = Object.keys(contractInterface.functions);
        
        // Filtra apenas fun√ß√µes PAYABLE que existem no ABI
        const payableFunctions = allFunctions.filter(funcName => {
            const fragment = contractInterface.functions[funcName];
            return fragment.payable;
        });
        
        console.log(`üí∞ Encontradas ${payableFunctions.length} fun√ß√µes PAYABLE no ABI:`);
        payableFunctions.forEach(func => console.log(`   üí° ${func}`));
        
        if (payableFunctions.length === 0) {
            console.log('‚ùå Nenhuma fun√ß√£o PAYABLE encontrada no ABI!');
            return false;
        }
        
        // Testa cada fun√ß√£o PAYABLE com estimateGas
        for (const funcName of payableFunctions) {
            try {
                console.log(`üß™ Testando fun√ß√£o PAYABLE: ${funcName}()`);
                
                const fragment = contractInterface.functions[funcName];
                const testValue = ethers.utils.parseEther('0.001');
                
                // Monta par√¢metros baseado nos inputs da fun√ß√£o
                const testParams = fragment.inputs.map(input => {
                    switch(input.type) {
                        case 'uint256': return '1000'; // Quantidade de teste
                        case 'address': return walletAddress || '0x0000000000000000000000000000000000000000';
                        case 'bool': return true;
                        default: return '0';
                    }
                });
                
                // Se n√£o tem par√¢metros, usa s√≥ o value
                if (testParams.length === 0) {
                    await currentContract.estimateGas[funcName]({ value: testValue });
                } else {
                    await currentContract.estimateGas[funcName](...testParams, { value: testValue });
                }
                
                console.log(`‚úÖ SUCESSO! Fun√ß√£o ${funcName}() √© v√°lida e funcional!`);
                
                // **VALIDA√á√ÉO EXTRA: Testa callStatic tamb√©m**
                try {
                    if (testParams.length === 0) {
                        await currentContract.callStatic[funcName]({ value: testValue });
                    } else {
                        await currentContract.callStatic[funcName](...testParams, { value: testValue });
                    }
                    console.log(`‚úÖ CONFIRMADO! ${funcName}() passou tamb√©m no callStatic!`);
                } catch (staticError) {
                    if (staticError.message.includes('revert') || staticError.message.includes('execution reverted')) {
                        console.log(`‚ö†Ô∏è ${funcName}() reverte com par√¢metros de teste (NORMAL - fun√ß√£o existe!)`);
                    } else {
                        console.log(`‚ùå ${funcName}() falhou no callStatic: ${staticError.message}`);
                        continue; // Pula esta fun√ß√£o
                    }
                }
                
                buyFunctionName = funcName;
                updateCompatibilityStatus('buyStatus', '‚úÖ Validada 100%', 'success');
                addContractMessage(`‚úÖ Fun√ß√£o "${funcName}" totalmente validada`, 'success');
                
                // **DIAGN√ìSTICO PROFUNDO antes de habilitar**
                console.log('üî¨ Executando diagn√≥stico profundo antes de habilitar se√ß√£o...');
                const contractReady = await performDeepContractAnalysis(CONFIG.contractAddress, funcName);
                
                if (contractReady) {
                    // üéØ AGORA SIM: Habilita se√ß√£o de compra apenas quando contrato est√° realmente pronto
                    console.log('üéâ Contrato APROVADO no diagn√≥stico profundo - Habilitando se√ß√£o de compra');
                    enablePurchaseSection();
                } else {
                    console.log('‚ùå Contrato REPROVADO no diagn√≥stico profundo - Se√ß√£o permanece bloqueada');
                    addContractMessage('‚ùå Contrato n√£o est√° pronto para negocia√ß√µes', 'error');
                    hidePurchaseSection();
                }
                
                return contractReady;
                
            } catch (error) {
                // **MUDAN√áA CR√çTICA: Considerar REVERT como fun√ß√£o V√ÅLIDA**
                if (error.code === 'UNPREDICTABLE_GAS_LIMIT' || 
                    error.message.includes('execution reverted') || 
                    error.message.includes('revert')) {
                    
                    console.log(`‚úÖ FUN√á√ÉO V√ÅLIDA! ${funcName}() existe e reverte (comportamento esperado)`);
                    console.log(`üìù Motivo do revert: ${error.reason || error.message}`);
                    
                    // Fun√ß√£o existe, apenas reverte com par√¢metros de teste
                    buyFunctionName = funcName;
                    updateCompatibilityStatus('buyStatus', '‚úÖ Validada (com revert)', 'success');
                    addContractMessage(`‚úÖ Fun√ß√£o "${funcName}" detectada - reverte com par√¢metros teste`, 'success');
                    
                    // **DIAGN√ìSTICO PROFUNDO antes de habilitar**
                    console.log('üî¨ Executando diagn√≥stico profundo para fun√ß√£o com revert...');
                    const contractReady = await performDeepContractAnalysis(CONFIG.contractAddress, funcName);
                    
                    if (contractReady) {
                        // üéØ Habilita se√ß√£o de compra 
                        console.log('üéâ Contrato APROVADO no diagn√≥stico profundo - Habilitando se√ß√£o de compra');
                        enablePurchaseSection();
                    } else {
                        console.log('‚ùå Contrato REPROVADO no diagn√≥stico profundo - Se√ß√£o permanece bloqueada');
                        addContractMessage('‚ùå Contrato n√£o est√° pronto para negocia√ß√µes', 'error');
                        hidePurchaseSection();
                    }
                    
                    return contractReady;
                } else {
                    console.log(`‚ùå Fun√ß√£o ${funcName}() falhou: ${error.message}`);
                }
            }
        }
        
        console.log('‚ùå Nenhuma fun√ß√£o PAYABLE funcionou corretamente');
        return false;
        
    } catch (error) {
        console.log('‚ùå Erro ao testar fun√ß√µes PAYABLE:', error.message);
        return false;
    }
}

/**
 * Investiga√ß√£o adicional: consulta ABI via Etherscan para contrato n√£o-padr√£o
 */
async function investigateContractViaEtherscan(contractAddress) {
    try {
        console.log('üîç Investigando contrato via Etherscan API...');
        
        // Tenta pegar ABI completo do Etherscan
        const apiKey = 'YourApiKeyToken'; // Vamos tentar sem API key primeiro
        const etherscanUrl = `https://api.bscscan.com/api?module=contract&action=getabi&address=${contractAddress}`;
        
        console.log('üåê URL da consulta:', etherscanUrl);
        
        const response = await fetch(etherscanUrl);
        const data = await response.json();
        
        if (data.status === '1' && data.result) {
            const abi = JSON.parse(data.result);
            console.log('üìã ABI completo obtido do Etherscan:');
            
            // Filtra apenas fun√ß√µes
            const functions = abi.filter(item => item.type === 'function');
            const payableFunctions = functions.filter(func => func.stateMutability === 'payable');
            
            console.log(`üìä Estat√≠sticas do contrato:`);
            console.log(`   üìå Total de fun√ß√µes: ${functions.length}`);
            console.log(`   üí∞ Fun√ß√µes payable: ${payableFunctions.length}`);
            
            if (payableFunctions.length > 0) {
                console.log('üí∞ Fun√ß√µes PAYABLE encontradas (poss√≠veis compras):');
                payableFunctions.forEach(func => {
                    const inputs = func.inputs.map(i => `${i.type} ${i.name}`).join(', ');
                    console.log(`   üéØ ${func.name}(${inputs})`);
                });
                
                // Testa a primeira fun√ß√£o payable
                const firstPayable = payableFunctions[0];
                console.log(`üß™ Testando primeira fun√ß√£o payable: ${firstPayable.name}()`);
                
                try {
                    // Monta par√¢metros b√°sicos baseado nos inputs esperados
                    const testParams = firstPayable.inputs.map(input => {
                        switch(input.type) {
                            case 'uint256': return '1000';
                            case 'address': return walletAddress || '0x0000000000000000000000000000000000000000';
                            case 'bool': return true;
                            default: return '0';
                        }
                    });
                    
                    // Se a fun√ß√£o √© payable, adiciona value
                    const callOptions = { value: ethers.utils.parseEther('0.001') };
                    
                    await currentContract.estimateGas[firstPayable.name](...testParams, callOptions);
                    
                    console.log(`‚úÖ SUCESSO! Fun√ß√£o ${firstPayable.name}() funciona!`);
                    buyFunctionName = firstPayable.name;
                    updateCompatibilityStatus('buyStatus', '‚úÖ Detectada via Etherscan', 'success');
                    addContractMessage(`‚úÖ Fun√ß√£o de compra "${firstPayable.name}" encontrada via Etherscan`, 'success');
                    return true;
                    
                } catch (testError) {
                    console.log(`‚ùå Fun√ß√£o ${firstPayable.name}() rejeitou teste:`, testError.message);
                }
            }
        }
        
    } catch (error) {
        console.log('‚ùå Erro na investiga√ß√£o via Etherscan:', error.message);
    }
    
    return false;
}

/**
 * Verifica fun√ß√µes de compra dispon√≠veis
 */
async function verifyBuyFunctions() {
    const buyFunctions = [
        'buy', 'buyTokens', 'purchase', 
        'buyWithBNB', 'mint', 'swap',
        'exchange', 'buyToken'
    ];
    
    addContractMessage('ÔøΩ Teste 4: Testando fun√ß√£o buy()...', 'info');
    
    for (const funcName of buyFunctions) {
        try {
            console.log(`üîç Testando fun√ß√£o: ${funcName}()`);
            
            // **MELHORIA: Usar valor baseado nos limites detectados, como no teste**
            let testValue = ethers.utils.parseEther('0.001'); // Valor padr√£o
            
            // Se temos limites detectados, usar o valor m√≠nimo + margem
            if (tokenInfo.limits && tokenInfo.limits.minPurchase && tokenInfo.limits.minPurchase.gt(0)) {
                testValue = tokenInfo.limits.minPurchase;
                console.log(`üìè Usando valor m√≠nimo do contrato: ${ethers.utils.formatEther(testValue)} BNB`);
            }
            
            // Prepara par√¢metros baseado no tipo da fun√ß√£o
            let gasEstimateParams;
            switch(funcName) {
                case 'mint':
                    // Para mint, testa com address e amount
                    gasEstimateParams = [walletAddress, '1000'];
                    break;
                case 'swap':
                    // Para swap, testa troca b√°sica
                    gasEstimateParams = ['0x0000000000000000000000000000000000000000', '1000'];
                    break;
                default:
                    // Para fun√ß√µes de compra normais, usa value
                    gasEstimateParams = [{ value: testValue }];
            }
            
            // **MELHORIA: Tenta estimar gas primeiro**
            const gasEstimate = await currentContract.estimateGas[funcName](...gasEstimateParams);
            
            // Se chegou aqui, a fun√ß√£o existe e √© v√°lida
            console.log(`‚úÖ Fun√ß√£o buy(): Detectada e funcional (Gas: ${gasEstimate})`);
            
            // **MELHORIA: Teste callStatic adicional como no teste**
            try {
                console.log('üî¨ Teste 5: Teste callStatic...');
                await currentContract.callStatic[funcName](...gasEstimateParams);
                console.log('‚úÖ CallStatic funcionou perfeitamente');
                addContractMessage('‚úÖ CallStatic: Passou em todos os testes', 'success');
            } catch (callError) {
                if (callError.message.includes('revert') || callError.reason) {
                    console.log(`‚úÖ CallStatic com revert (normal): ${callError.reason || callError.message}`);
                    addContractMessage('‚úÖ CallStatic: Revert detectado (comportamento normal)', 'success');
                } else {
                    console.log(`‚ö†Ô∏è CallStatic falhou: ${callError.message}`);
                    addContractMessage(`‚ö†Ô∏è CallStatic: ${callError.message}`, 'warning');
                }
            }
            
            buyFunctionName = funcName;
            updateCompatibilityStatus('buyStatus', '‚úÖ Validada 100%', 'success');
            addContractMessage(`‚úÖ Fun√ß√£o "${funcName}" totalmente validada`, 'success');
            return;
            
        } catch (error) {
            if (error.message.includes('is not a function')) {
                console.log(`‚ùå Fun√ß√£o ${funcName}() n√£o existe no contrato`);
            } else if (error.code === 'UNPREDICTABLE_GAS_LIMIT' || 
                       error.message.includes('revert') || 
                       error.message.includes('execution reverted')) {
                // **MELHORIA: Melhor tratamento de revert - incluir motivo**
                const reason = error.reason || error.message.split(':')[1] || 'Motivo n√£o especificado';
                console.log(`‚ö†Ô∏è Fun√ß√£o buy(): Detectada mas reverte (${reason})`);
                buyFunctionName = funcName;
                updateCompatibilityStatus('buyStatus', '‚úÖ Detectada', 'success');
                addContractMessage(`‚úÖ Fun√ß√£o de compra "${funcName}" detectada (reverte com par√¢metros de teste - normal)`, 'success');
                return;
            } else {
                console.log(`‚ùå Fun√ß√£o ${funcName}() erro: ${error.message}`);
            }
        }
    }
    
    // Se n√£o encontrou nenhuma fun√ß√£o v√°lida
    console.log('‚ùå Nenhuma fun√ß√£o de compra v√°lida encontrada no contrato');
    
    // **INVESTIGA√á√ÉO ADICIONAL: Listar todas as fun√ß√µes dispon√≠veis no contrato**
    console.log('üîç INVESTIGANDO - Fun√ß√µes dispon√≠veis no contrato:');
    try {
        const contractInterface = currentContract.interface;
        const allFunctions = Object.keys(contractInterface.functions);
        
        console.log('üìã Todas as fun√ß√µes do contrato:');
        allFunctions.forEach(func => {
            const fragment = contractInterface.functions[func];
            const isPayable = fragment.payable;
            const inputs = fragment.inputs.map(i => `${i.type} ${i.name}`).join(', ');
            console.log(`   üìå ${func}(${inputs}) ${isPayable ? '[PAYABLE]' : ''}`);
        });
        
        // Procura por fun√ß√µes que possam ser de compra baseado no nome
        const possibleBuyFunctions = allFunctions.filter(func => 
            func.toLowerCase().includes('buy') || 
            func.toLowerCase().includes('purchase') ||
            func.toLowerCase().includes('mint') ||
            func.toLowerCase().includes('swap') ||
            func.toLowerCase().includes('exchange')
        );
        
        if (possibleBuyFunctions.length > 0) {
            console.log('üéØ Fun√ß√µes suspeitas de compra encontradas:');
            possibleBuyFunctions.forEach(func => console.log(`   üí° ${func}`));
            addContractMessage(`‚ö†Ô∏è Contrato tem fun√ß√µes suspeitas: ${possibleBuyFunctions.join(', ')}`, 'warning');
        }
        
    } catch (e) {
        console.log('‚ùå Erro ao listar fun√ß√µes do contrato:', e.message);
    }
    
    // **TESTE FINAL: Valida√ß√£o das fun√ß√µes PAYABLE reais do ABI**
    console.log('üéØ Teste final: Validando fun√ß√µes PAYABLE do ABI...');
    const found = await testActualPayableFunctions();
    
    if (!found) {
        buyFunctionName = null;
        updateCompatibilityStatus('buyStatus', '‚ùå N√£o dispon√≠vel', 'error');
        addContractMessage('‚ùå Este contrato n√£o suporta compra direta de tokens', 'error');
        
        // üö® IMPORTANTE: Garantir que a se√ß√£o de compra permane√ßa OCULTA
        hidePurchaseSection();
        console.log('üîí Se√ß√£o de compra mantida OCULTA - Contrato incompat√≠vel');
    }
}

/**
 * Carrega informa√ß√µes do token
 */
async function loadTokenInfo() {
    try {
        tokenInfo = {
            name: await currentContract.name(),
            symbol: await currentContract.symbol(),
            decimals: await currentContract.decimals(),
            totalSupply: await currentContract.totalSupply(),
            contractBalance: await currentProvider.getBalance(currentContract.address)
        };
        
        // Tenta detectar pre√ßo do contrato
        try {
            let price = null;
            const priceFunctions = [
                'tokenPrice', 'price', 'getPrice', 'buyPrice', 
                'tokenCost', 'cost', 'salePrice', 'pricePerToken'
            ];
            
            console.log('üí∞ Teste 2: Verificando pre√ßo...');
            
            for (const priceFunc of priceFunctions) {
                try {
                    console.log(`üîç Tentando fun√ß√£o: ${priceFunc}()`);
                    price = await currentContract[priceFunc]();
                    console.log(`‚úÖ Pre√ßo encontrado via ${priceFunc}(): ${price.toString()}`);
                    break;
                } catch (e) {
                    console.log(`‚ùå Fun√ß√£o ${priceFunc}() n√£o dispon√≠vel`);
                }
            }
            
            if (price) {
                tokenInfo.price = ethers.utils.formatEther(price);
                console.log(`‚úÖ Pre√ßo: ${tokenInfo.price} BNB por token`);
            } else {
                tokenInfo.price = CONFIG.defaultTokenPrice;
                console.log(`‚ö†Ô∏è Pre√ßo n√£o detectado, usando padr√£o: ${CONFIG.defaultTokenPrice} BNB`);
            }
        } catch (error) {
            tokenInfo.price = CONFIG.defaultTokenPrice;
            console.log(`‚ùå Erro no pre√ßo: ${error.message}`);
        }

        // **MELHORIA: Verificar limites de compra como no teste**
        await checkPurchaseLimits();
        
        updateTokenInfoUI();
        
        // ‚ö†Ô∏è N√ÉO habilita se√ß√£o de compra automaticamente
        // A se√ß√£o s√≥ ser√° habilitada SE uma fun√ß√£o de compra v√°lida for encontrada
        console.log('‚ÑπÔ∏è Informa√ß√µes do token carregadas - Aguardando valida√ß√£o de fun√ß√µes de compra');
        
    } catch (error) {
        throw new Error(`Erro ao carregar informa√ß√µes do token: ${error.message}`);
    }
}

/**
 * Atualiza UI com informa√ß√µes do token
 */
function updateTokenInfoUI() {
    document.getElementById('tokenName').textContent = tokenInfo.name || '-';
    document.getElementById('tokenSymbol').textContent = tokenInfo.symbol || '-';
    document.getElementById('tokenDecimals').textContent = tokenInfo.decimals || '-';
    
    // Formata total supply
    const totalSupply = ethers.utils.formatUnits(tokenInfo.totalSupply, tokenInfo.decimals);
    document.getElementById('tokenTotalSupply').textContent = `${formatNumber(totalSupply)} ${tokenInfo.symbol}`;
    
    // Formata saldo do contrato
    const contractBalance = ethers.utils.formatEther(tokenInfo.contractBalance);
    document.getElementById('contractBalance').textContent = `${formatNumber(contractBalance)} BNB`;
    
    // Define pre√ßo como READ-ONLY (detectado do contrato)
    const priceInput = document.getElementById('token-price');
    if (priceInput) {
        priceInput.value = tokenInfo.price;
        priceInput.readOnly = true; // Campo somente leitura
        priceInput.disabled = false; // Habilita para mostrar o valor
        priceInput.style.backgroundColor = '#2d3748'; // Cor de fundo diferenciada
        priceInput.style.cursor = 'not-allowed'; // Cursor indicativo
        
        // Adiciona tooltip explicativo
        priceInput.title = 'Pre√ßo detectado automaticamente do contrato - n√£o pode ser alterado';
        
        console.log(`üí∞ Pre√ßo detectado: ${tokenInfo.price} BNB por token`);
    }
    
    // **MELHORIA: Mostrar limites de compra na interface**
    if (tokenInfo.minPurchase && tokenInfo.maxPurchase) {
        const limitsInfo = document.getElementById('purchase-limits-info');
        const minDisplay = document.getElementById('min-purchase-display');
        const maxDisplay = document.getElementById('max-purchase-display');
        
        if (limitsInfo && minDisplay && maxDisplay) {
            minDisplay.textContent = `${tokenInfo.minPurchase} BNB`;
            maxDisplay.textContent = `${tokenInfo.maxPurchase} BNB`;
            limitsInfo.style.display = 'block';
        }
    }
}

/**
 * üìè Verificar limites de compra do contrato
 */
async function checkPurchaseLimits() {
    console.log('üìè Teste 3: Verificando limites...');
    
    try {
        let minPurchase = null, maxPurchase = null;
        
        // Tenta detectar limites
        try {
            minPurchase = await currentContract.minPurchase();
            maxPurchase = await currentContract.maxPurchase();
            
            const minFormatted = ethers.utils.formatEther(minPurchase);
            const maxFormatted = ethers.utils.formatEther(maxPurchase);
            
            tokenInfo.minPurchase = minFormatted;
            tokenInfo.maxPurchase = maxFormatted;
            
            console.log(`‚úÖ Limites: ${minFormatted} - ${maxFormatted} BNB`);
            addContractMessage(`‚úÖ Compra m√≠nima: ${minFormatted} BNB, m√°xima: ${maxFormatted} BNB`, 'success');
            
        } catch (e) {
            console.log(`‚ö†Ô∏è Limites: N√£o foi poss√≠vel verificar - ${e.message}`);
            addContractMessage('‚ö†Ô∏è Limites de compra n√£o detectados (pode n√£o ter)', 'warning');
        }
        
        // Armazenar para uso posterior
        tokenInfo.limits = { minPurchase, maxPurchase };
        
    } catch (error) {
        console.log(`‚ùå Erro na verifica√ß√£o de limites: ${error.message}`);
    }
}

// ==================== GERENCIAMENTO DE COMPRA ====================

/**
 * Habilita se√ß√£o de compra - APENAS quando fun√ß√£o v√°lida √© confirmada
 */
function enablePurchaseSection() {
    // üõ°Ô∏è PROTE√á√ÉO: S√≥ executa se realmente h√° uma fun√ß√£o de compra v√°lida
    if (!buyFunctionName) {
        console.log('‚ùå enablePurchaseSection() chamada sem fun√ß√£o de compra v√°lida - IGNORANDO');
        return;
    }
    
    const section = document.getElementById('purchase-section');
    const priceInput = document.getElementById('token-price');
    const quantityInput = document.getElementById('token-quantity');
    const purchaseBtn = document.getElementById('execute-purchase-btn');
    
    console.log('üéâ HABILITANDO SE√á√ÉO DE COMPRA - Fun√ß√£o validada:', buyFunctionName);
    console.log('üìç Se√ß√£o encontrada:', section ? 'SIM' : 'N√ÉO');
    console.log('üìç Campo quantidade encontrado:', quantityInput ? 'SIM' : 'N√ÉO');
    console.log('üìç Bot√£o compra encontrado:', purchaseBtn ? 'SIM' : 'N√ÉO');
    
    if (section) {
        section.style.display = 'block';
        // Adiciona uma anima√ß√£o de slide para mostrar que a se√ß√£o foi liberada
        section.classList.add('animate__animated', 'animate__slideInUp');
        console.log('‚úÖ Se√ß√£o de compra LIBERADA e exibida');
        
        // Adiciona uma mensagem visual de sucesso
        addContractMessage('üéâ Se√ß√£o de compra liberada - Contrato suporta compras!', 'success');
    }
    
    // Campo de pre√ßo permanece READ-ONLY (j√° configurado em updateTokenInfoUI)
    // N√£o habilitamos edi√ß√£o do pre√ßo pois √© detectado do contrato
    
    if (quantityInput) {
        quantityInput.disabled = false;
        console.log('‚úÖ Campo quantidade habilitado');
    }
    
    // HABILITA o bot√£o com fun√ß√£o validada
    if (purchaseBtn) {
        purchaseBtn.disabled = false;
        purchaseBtn.style.opacity = '1';
        purchaseBtn.style.cursor = 'pointer';
        purchaseBtn.style.backgroundColor = '#28a745'; // Verde para indicar liberado
        console.log(`‚úÖ Bot√£o LIBERADO - Fun√ß√£o confirmada: ${buyFunctionName}()`);
    } else {
        console.error('‚ùå Bot√£o de compra n√£o encontrado no DOM!');
    }
    
    console.log('üõí Se√ß√£o de compra TOTALMENTE habilitada - Contrato validado para compras');
}

/**
 * Mant√©m se√ß√£o de compra oculta quando contrato n√£o suporta compras
 */
function hidePurchaseSection() {
    const section = document.getElementById('purchase-section');
    const purchaseBtn = document.getElementById('execute-purchase-btn');
    
    if (section) {
        section.style.display = 'none';
        console.log('üîí Se√ß√£o de compra mantida OCULTA');
    }
    
    if (purchaseBtn) {
        purchaseBtn.disabled = true;
        purchaseBtn.style.opacity = '0.3';
        purchaseBtn.style.cursor = 'not-allowed';
        purchaseBtn.style.backgroundColor = '#dc3545'; // Vermelho para indicar indispon√≠vel
        console.log('üîí Bot√£o de compra desabilitado');
    }
    
    // Adiciona uma mensagem explicativa para o usu√°rio
    addContractMessage('üîí Se√ß√£o de compra n√£o dispon√≠vel - Este contrato n√£o suporta compra direta', 'warning');
    console.log('üîí Se√ß√£o de compra permanece oculta - Contrato incompat√≠vel');
}

/**
 * Debug do estado do bot√£o de compra - fun√ß√£o global para console
 */
function debugPurchaseButton() {
    const btn = document.getElementById('execute-purchase-btn');
    console.log('üîß DEBUG BOT√ÉO DE COMPRA:');
    console.log('üìç Bot√£o encontrado:', btn ? 'SIM' : 'N√ÉO');
    if (btn) {
        console.log('üìç Disabled:', btn.disabled);
        console.log('üìç Style opacity:', btn.style.opacity);
        console.log('üìç Style cursor:', btn.style.cursor);
        console.log('üìç Classes:', btn.className);
        console.log('üìç Texto:', btn.textContent.trim());
    }
    console.log('üìç buyFunctionName:', buyFunctionName);
}

// Torna dispon√≠vel no console para debug
window.debugPurchaseButton = debugPurchaseButton;

/**
 * Calcula total da compra
 */
function calculateTotal() {
    const priceInput = document.getElementById('token-price');
    const quantityInput = document.getElementById('token-quantity');
    const totalTokensSpan = document.getElementById('totalTokens');
    const totalPriceSpan = document.getElementById('totalPrice');
    
    if (priceInput && quantityInput && totalTokensSpan && totalPriceSpan) {
        const price = parseFloat(priceInput.value) || 0;
        const quantity = parseFloat(quantityInput.value) || 0;
        const total = price * quantity;
        
        totalTokensSpan.textContent = formatNumber(quantity);
        totalPriceSpan.textContent = `${formatNumber(total)} BNB`;
    }
}

/**
 * Executa a compra de tokens
 */
async function executePurchase() {
    if (!buyFunctionName) {
        alert('Este contrato n√£o suporta compra direta');
        return;
    }
    
    // Verifica se a fun√ß√£o existe no contrato antes de executar
    if (!buyFunctionName) {
        alert('‚ùå Nenhuma fun√ß√£o de compra foi detectada no contrato');
        return;
    }
    
    // **VALIDA√á√ÉO CR√çTICA: Verifica se a fun√ß√£o realmente existe no contrato**
    if (!currentContract[buyFunctionName]) {
        console.error(`‚ùå ERRO CR√çTICO: Fun√ß√£o ${buyFunctionName}() n√£o existe no contrato!`);
        alert(`‚ùå Erro: A fun√ß√£o ${buyFunctionName}() n√£o est√° dispon√≠vel no contrato`);
        
        // Reseta a detec√ß√£o
        buyFunctionName = null;
        updateCompatibilityStatus('buyStatus', '‚ùå Fun√ß√£o inv√°lida', 'error');
        return;
    }
    
    console.log(`‚úÖ Fun√ß√£o ${buyFunctionName}() confirmada no contrato`);
    
    // Verifica se MetaMask est√° conectado
    if (!walletConnected || !walletAddress) {
        alert('Por favor, conecte sua carteira MetaMask primeiro');
        return;
    }
    
    const quantityInput = document.getElementById('token-quantity');
    const priceInput = document.getElementById('token-price');
    
    const quantity = parseFloat(quantityInput.value);
    const price = parseFloat(priceInput.value);
    
    if (!quantity || quantity <= 0) {
        alert('Por favor, digite uma quantidade v√°lida');
        return;
    }

    if (!price || price <= 0) {
        alert('Por favor, digite um pre√ßo v√°lido');
        return;
    }

    // **MELHORIA: Validar contra limites detectados do contrato**
    const totalValue = price * quantity;
    
    if (tokenInfo.limits) {
        const { minPurchase, maxPurchase } = tokenInfo.limits;
        
        if (minPurchase && totalValue < parseFloat(tokenInfo.minPurchase)) {
            alert(`Valor abaixo do m√≠nimo permitido pelo contrato (${tokenInfo.minPurchase} BNB)`);
            return;
        }
        
        if (maxPurchase && totalValue > parseFloat(tokenInfo.maxPurchase)) {
            alert(`Valor acima do m√°ximo permitido pelo contrato (${tokenInfo.maxPurchase} BNB)`);
            return;
        }
        
        console.log(`‚úÖ Valor ${totalValue} BNB est√° dentro dos limites do contrato`);
    }

    try {
        const totalValueStr = totalValue.toString();
        const valueInWei = ethers.utils.parseEther(totalValueStr);        clearPurchaseMessages();
        addPurchaseMessage('üöÄ Iniciando transa√ß√£o de compra...', 'info');
        
        // IMPORTANTE: Sempre usar MetaMask para transa√ß√µes (n√£o RPC p√∫blico)
        const web3Provider = new ethers.providers.Web3Provider(window.ethereum);
        const signer = web3Provider.getSigner();
        
        // Cria contrato com signer do MetaMask
        const contractWithSigner = new ethers.Contract(
            currentContract.address, 
            CONFIG.tokenABI, 
            signer
        );
        
        console.log(`üí∞ Executando compra: ${quantity} tokens por ${totalValueStr} BNB`);
        console.log(`üìù Fun√ß√£o: ${buyFunctionName}()`);
        console.log(`üíé Valor: ${valueInWei.toString()} wei`);
        console.log(`üìç Contrato: ${currentContract.address}`);
        console.log(`üë§ Comprador: ${walletAddress}`);
        
        // DIAGN√ìSTICO AVAN√áADO DO CONTRATO
        addPurchaseMessage('üîç Verificando condi√ß√µes da compra...', 'info');
        try {
            // Usa RPC p√∫blico para diagn√≥stico (n√£o MetaMask que est√° falhando)
            const publicProvider = await initializeProviderWithFallback();
            
            const contractBalance = await publicProvider.getBalance(currentContract.address);
            const userBalance = await publicProvider.getBalance(walletAddress);
            
            console.log(`üí∞ Saldo do contrato: ${ethers.utils.formatEther(contractBalance)} BNB`);
            console.log(`üí∞ Saldo do usu√°rio: ${ethers.utils.formatEther(userBalance)} BNB`);
            
            // Verifica se usu√°rio tem saldo suficiente
            const totalCostWei = ethers.utils.parseEther(totalValue);
            if (userBalance.lt(totalCostWei)) {
                throw new Error(`Saldo insuficiente. Voc√™ tem ${ethers.utils.formatEther(userBalance)} BNB, mas precisa de ${totalValue} BNB`);
            }
            
            // Verifica se o contrato tem tokens suficientes
            // ‚ö†Ô∏è NOTA: Nem todos os contratos armazenam tokens no endere√ßo do contrato
            try {
                if (tokenInfo.totalSupply) {
                    const contractTokenBalance = await currentContract.balanceOf(currentContract.address);
                    const contractTokens = parseFloat(ethers.utils.formatUnits(contractTokenBalance, tokenInfo.decimals));
                    
                    console.log(`ü™ô Tokens no endere√ßo do contrato: ${contractTokens} ${tokenInfo.symbol}`);
                    
                    if (contractTokens === 0) {
                        console.log('‚ö†Ô∏è Contrato n√£o tem tokens em seu endere√ßo - pode usar mint ou reserva externa');
                        addPurchaseMessage('‚ÑπÔ∏è Contrato pode usar mint din√¢mico ou reserva externa', 'info');
                    } else if (contractTokens < quantity) {
                        console.log(`‚ö†Ô∏è Contrato tem poucos tokens (${contractTokens}), mas pode ter outras fontes`);
                        addPurchaseMessage('‚ö†Ô∏è Verificando outras fontes de tokens...', 'warning');
                    } else {
                        console.log(`‚úÖ Contrato tem tokens suficientes: ${contractTokens} >= ${quantity}`);
                        addPurchaseMessage('‚úÖ Tokens suficientes detectados no contrato', 'success');
                    }
                }
            } catch (tokenCheckError) {
                console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar tokens do contrato:', tokenCheckError.message);
                addPurchaseMessage('‚ÑπÔ∏è Verifica√ß√£o de tokens ignorada - contrato pode usar mint', 'info');
            }
            
            // üîç VERIFICA√á√ÉO ADICIONAL: Tenta detectar se contrato usa mint ou tem reservas
            try {
                console.log('üîç Verificando capacidade de fornecimento de tokens...');
                
                // Tenta verificar se h√° fun√ß√£o de tokens dispon√≠veis
                const availabilityFunctions = ['tokensAvailable', 'tokensForSale', 'remainingTokens', 'maxSupply'];
                
                for (const funcName of availabilityFunctions) {
                    try {
                        const available = await currentContract[funcName]();
                        const availableTokens = parseFloat(ethers.utils.formatUnits(available, tokenInfo.decimals));
                        console.log(`üí∞ ${funcName}(): ${availableTokens} tokens dispon√≠veis`);
                        
                        if (availableTokens >= quantity) {
                            addPurchaseMessage(`‚úÖ Tokens dispon√≠veis confirmados via ${funcName}()`, 'success');
                            break;
                        }
                    } catch (e) {
                        // Fun√ß√£o n√£o existe ou falhou, continua
                    }
                }
                
                // Verifica se contrato tem fun√ß√£o de mint (indicativo de cria√ß√£o din√¢mica)
                const contractInterface = currentContract.interface;
                const hasMintFunction = Object.keys(contractInterface.functions).some(func => 
                    func.toLowerCase().includes('mint')
                );
                
                if (hasMintFunction) {
                    console.log('‚úÖ Contrato tem fun√ß√£o de mint - pode criar tokens dinamicamente');
                    addPurchaseMessage('‚úÖ Contrato suporta cria√ß√£o din√¢mica de tokens', 'success');
                }
                
            } catch (availabilityError) {
                console.log('‚ÑπÔ∏è Verifica√ß√£o de disponibilidade ignorada:', availabilityError.message);
            }
            
            // DIAGN√ìSTICO AVAN√áADO - Verifica condi√ß√µes especiais do contrato
            console.log('üîç Executando diagn√≥stico avan√ßado do contrato...');
            await performAdvancedContractDiagnostics(publicProvider);
            
            addPurchaseMessage('‚úÖ Verifica√ß√µes iniciais aprovadas', 'success');
            
        } catch (diagError) {
            console.warn('‚ö†Ô∏è Erro no diagn√≥stico:', diagError.message);
            addPurchaseMessage(`‚ö†Ô∏è Aviso: ${diagError.message}`, 'warning');
            
            // Se o erro √© cr√≠tico, para por aqui
            if (diagError.message.includes('Saldo insuficiente') || diagError.message.includes('n√£o tem tokens suficientes')) {
                addPurchaseMessage('‚ùå Compra cancelada devido a verifica√ß√£o falhada', 'error');
                return;
            }
        }
        
        // SIMULA√á√ÉO COM DIFERENTES VALORES PARA ENCONTRAR O PROBLEMA
        addPurchaseMessage('üß™ Testando diferentes cen√°rios...', 'info');
        try {
            // Cria provider MetaMask apenas para simula√ß√£o
            const metamaskProvider = new ethers.providers.Web3Provider(window.ethereum);
            const metamaskSigner = metamaskProvider.getSigner();
            const contractForSim = new ethers.Contract(currentContract.address, CONFIG.tokenABI, metamaskSigner);
            
            // Teste 1: Simula√ß√£o com valor exato
            console.log('üß™ Teste 1: Simula√ß√£o com valor exato');
            try {
                // **VALIDA√á√ÉO: Verifica se a fun√ß√£o existe antes de usar**
                if (!contractForSim[buyFunctionName]) {
                    throw new Error(`Fun√ß√£o ${buyFunctionName}() n√£o existe no contrato`);
                }
                
                await contractForSim.callStatic[buyFunctionName]({
                    value: valueInWei,
                    from: walletAddress
                });
                console.log('‚úÖ Simula√ß√£o com valor exato: SUCESSO');
                addPurchaseMessage('‚úÖ Simula√ß√£o bem-sucedida', 'success');
            } catch (simError1) {
                console.log('‚ùå Simula√ß√£o com valor exato: FALHOU');
                console.log('üîç Raz√£o:', simError1.reason || simError1.message);
                
                // Tenta extrair a raz√£o espec√≠fica do revert
                await analyzeRevertReason(simError1, contractForSim, valueInWei);
            }
            
        } catch (simError) {
            console.warn('‚ö†Ô∏è Erro na simula√ß√£o geral:', simError.message);
            
            // An√°lise do erro de simula√ß√£o
            if (simError.message.includes('missing trie node')) {
                addPurchaseMessage('‚ö†Ô∏è Problema de sincroniza√ß√£o da rede - tentando mesmo assim', 'warning');
            } else if (simError.message.includes('revert')) {
                addPurchaseMessage('‚ùå Contrato rejeitou a simula√ß√£o - verifique os par√¢metros', 'error');
                return;
            } else {
                addPurchaseMessage(`‚ö†Ô∏è Simula√ß√£o falhou: ${simError.message}`, 'warning');
            }
            
            addPurchaseMessage('üöÄ Prosseguindo com a transa√ß√£o real...', 'info');
        }
        
        // **VALIDA√á√ÉO FINAL: Verifica se a fun√ß√£o existe no contrato assinado**
        if (!contractWithSigner[buyFunctionName]) {
            throw new Error(`Fun√ß√£o ${buyFunctionName}() n√£o existe no contrato`);
        }
        
        // Executa a transa√ß√£o
        const tx = await contractWithSigner[buyFunctionName]({
            value: valueInWei,
            gasLimit: CONFIG.gasLimit
        });
        
        addPurchaseMessage(`‚úÖ Transa√ß√£o enviada: ${tx.hash}`, 'success');
        addPurchaseMessage('‚è≥ Aguardando confirma√ß√£o...', 'info');
        
        // Aguarda confirma√ß√£o
        const receipt = await tx.wait();
        
        addPurchaseMessage('üéâ Transa√ß√£o confirmada!', 'success');
        
        // Mostra detalhes da transa√ß√£o
        showTransactionDetails(receipt, quantity, totalValue);
        
    } catch (error) {
        console.error('‚ùå Erro na compra:', error);
        
        // Mensagens de erro mais detalhadas
        let errorMessage = 'Erro desconhecido';
        let technicalDetails = '';
        
        if (error.code === 'INSUFFICIENT_FUNDS') {
            errorMessage = 'Saldo insuficiente na carteira';
        } else if (error.code === 'USER_REJECTED') {
            errorMessage = 'Transa√ß√£o cancelada pelo usu√°rio';
        } else if (error.code === 'CALL_EXCEPTION') {
            errorMessage = 'Erro na execu√ß√£o do contrato';
            
            // An√°lise espec√≠fica do CALL_EXCEPTION
            if (error.receipt) {
                technicalDetails = `Hash: ${error.receipt.transactionHash}\n`;
                technicalDetails += `Gas usado: ${error.receipt.gasUsed}\n`;
                technicalDetails += `Status: ${error.receipt.status === 0 ? 'FAILED' : 'SUCCESS'}\n`;
                
                console.log('üìã Detalhes da transa√ß√£o falhada:');
                console.log('üîó Hash:', error.receipt.transactionHash);
                console.log('‚õΩ Gas usado:', error.receipt.gasUsed.toString());
                console.log('üìä Status:', error.receipt.status === 0 ? 'FAILED' : 'SUCCESS');
                
                // An√°lise espec√≠fica baseada no gas usado
                const gasUsed = error.receipt.gasUsed.toNumber();
                if (gasUsed === 21307 || gasUsed < 25000) {
                    console.log('üîç AN√ÅLISE: Gas muito baixo - fun√ß√£o falha no in√≠cio');
                    console.log('üí° Isso indica que o contrato rejeitou a transa√ß√£o imediatamente');
                    console.log('üí° Poss√≠veis causas espec√≠ficas:');
                    console.log('   - require() falhando logo no in√≠cio da fun√ß√£o');
                    console.log('   - Fun√ß√£o payable recebendo valor quando n√£o deveria');
                    console.log('   - Modificadores (onlyOwner, whenNotPaused, etc.) rejeitando');
                    console.log('   - Fun√ß√£o n√£o existe ou tem assinatura diferente');
                    
                    errorMessage += '\n\nüîç AN√ÅLISE T√âCNICA:';
                    errorMessage += '\nGas muito baixo (21307) indica que o contrato rejeitou a transa√ß√£o imediatamente.';
                    errorMessage += '\n\nCausas mais prov√°veis:';
                    errorMessage += '\n‚Ä¢ Contrato est√° pausado ou com restri√ß√µes';
                    errorMessage += '\n‚Ä¢ Fun√ß√£o buy() tem condi√ß√µes espec√≠ficas n√£o atendidas';
                    errorMessage += '\n‚Ä¢ Valor enviado n√£o est√° correto para este contrato';
                    errorMessage += '\n‚Ä¢ Contrato requer whitelist ou aprova√ß√£o pr√©via';
                    
                } else {
                    console.log('üîç AN√ÅLISE: Gas normal - erro durante execu√ß√£o');
                }
                
                // Poss√≠veis causas do erro
                console.log('üîç Poss√≠veis causas:');
                console.log('1. Contrato sem tokens suficientes para vender');
                console.log('2. Valor enviado incorreto (muito alto/baixo)');
                console.log('3. Contrato pausado ou com restri√ß√µes');
                console.log('4. Fun√ß√£o buy() com l√≥gica espec√≠fica n√£o atendida');
                console.log('5. Problema de aprova√ß√£o ou allowance');
                
                errorMessage += '\n\nPoss√≠veis causas:\n';
                errorMessage += '‚Ä¢ Contrato sem tokens para vender\n';
                errorMessage += '‚Ä¢ Valor enviado incorreto\n';
                errorMessage += '‚Ä¢ Contrato pausado ou restrito\n';
                errorMessage += '‚Ä¢ L√≥gica espec√≠fica do contrato n√£o atendida';
            }
        } else if (error.message.includes('revert')) {
            errorMessage = 'Transa√ß√£o rejeitada pelo contrato';
            
            // Tenta extrair raz√£o do revert
            if (error.reason) {
                errorMessage += `\nRaz√£o: ${error.reason}`;
                console.log(`üîç Raz√£o espec√≠fica do revert: ${error.reason}`);
            } else {
                // Tenta extrair da mensagem
                const revertMatch = error.message.match(/revert (.+)/i);
                if (revertMatch) {
                    errorMessage += `\nRaz√£o: ${revertMatch[1]}`;
                    console.log(`üîç Raz√£o extra√≠da: ${revertMatch[1]}`);
                }
            }
            
            // An√°lise de reverts comuns
            const errorMsg = error.message.toLowerCase();
            if (errorMsg.includes('execution reverted')) {
                errorMessage += '\n\nüí° O contrato executou mas rejeitou a transa√ß√£o.';
                errorMessage += '\nIsso indica que alguma condi√ß√£o interna n√£o foi atendida.';
                
                // Sugest√µes baseadas no gas baixo (21307)
                if (error.receipt && error.receipt.gasUsed.toNumber() < 25000) {
                    errorMessage += '\n\nüîç Sugest√µes espec√≠ficas (gas baixo):';
                    errorMessage += '\n‚Ä¢ Verifique se o contrato aceita pagamentos em BNB';
                    errorMessage += '\n‚Ä¢ Confirme se a quantidade est√° dentro dos limites';
                    errorMessage += '\n‚Ä¢ Verifique se sua conta est√° autorizada';
                    errorMessage += '\n‚Ä¢ Contrato pode estar pausado temporariamente';
                }
            }
        } else {
            errorMessage = error.message;
        }
        
        addPurchaseMessage(`‚ùå Erro: ${errorMessage}`, 'error');
        
        if (technicalDetails) {
            addPurchaseMessage(`üîß Detalhes t√©cnicos:\n${technicalDetails}`, 'warning');
        }
    }
}

/**
 * Diagn√≥stico avan√ßado do contrato para identificar problemas espec√≠ficos
 */
async function performAdvancedContractDiagnostics(provider) {
    const diagnosticFunctions = [
        { name: 'paused', desc: 'Contrato pausado' },
        { name: 'saleActive', desc: 'Venda ativa' },
        { name: 'saleEnabled', desc: 'Venda habilitada' },
        { name: 'owner', desc: 'Propriet√°rio do contrato' },
        { name: 'maxPurchase', desc: 'Compra m√°xima permitida' },
        { name: 'minPurchase', desc: 'Compra m√≠nima permitida' },
        { name: 'tokensForSale', desc: 'Tokens para venda' },
        { name: 'tokensAvailable', desc: 'Tokens dispon√≠veis' }
    ];
    
    const contractWithProvider = new ethers.Contract(currentContract.address, CONFIG.tokenABI, provider);
    const quantity = parseFloat(document.getElementById('token-quantity').value);
    
    for (const func of diagnosticFunctions) {
        try {
            const result = await contractWithProvider[func.name]();
            console.log(`üìã ${func.desc}: ${result.toString()}`);
            
            // An√°lise espec√≠fica de cada resultado
            if (func.name === 'paused' && result === true) {
                console.log('üö® PROBLEMA: Contrato est√° pausado!');
                throw new Error('Contrato est√° pausado - compras temporariamente desabilitadas');
            }
            
            if ((func.name === 'saleActive' || func.name === 'saleEnabled') && result === false) {
                console.log('üö® PROBLEMA: Venda n√£o est√° ativa!');
                throw new Error('Venda n√£o est√° ativa neste contrato');
            }
            
            if (func.name === 'maxPurchase' && result.gt(0)) {
                const maxInTokens = ethers.utils.formatUnits(result, tokenInfo.decimals);
                if (parseFloat(maxInTokens) < quantity) {
                    console.log(`üö® PROBLEMA: Quantidade solicitada (${quantity}) excede m√°ximo permitido (${maxInTokens})`);
                    throw new Error(`Quantidade m√°xima permitida: ${maxInTokens} tokens`);
                }
            }
            
            if (func.name === 'minPurchase' && result.gt(0)) {
                const minInTokens = ethers.utils.formatUnits(result, tokenInfo.decimals);
                if (parseFloat(minInTokens) > quantity) {
                    console.log(`üö® PROBLEMA: Quantidade solicitada (${quantity}) √© menor que m√≠nimo (${minInTokens})`);
                    throw new Error(`Quantidade m√≠nima necess√°ria: ${minInTokens} tokens`);
                }
            }
            
        } catch (error) {
            // Se √© um erro espec√≠fico da an√°lise, repassa
            if (error.message.includes('pausado') || error.message.includes('ativa') || 
                error.message.includes('m√°xima') || error.message.includes('m√≠nima')) {
                throw error;
            }
            // Sen√£o, fun√ß√£o simplesmente n√£o existe no contrato (normal)
            console.log(`üìã ${func.desc}: N√£o dispon√≠vel`);
        }
    }
    
    // Verifica se usu√°rio est√° na whitelist (se aplic√°vel)
    try {
        const isWhitelisted = await contractWithProvider.isWhitelisted(walletAddress);
        console.log(`üìã Usu√°rio na whitelist: ${isWhitelisted}`);
        if (isWhitelisted === false) {
            console.log('üö® PROBLEMA: Usu√°rio n√£o est√° na whitelist!');
            throw new Error('Seu endere√ßo n√£o est√° autorizado para comprar tokens');
        }
    } catch (error) {
        if (error.message.includes('autorizado')) {
            throw error;
        }
        console.log('üìã Whitelist: N√£o aplic√°vel');
    }
    
    // Verifica limites por usu√°rio
    try {
        const userLimit = await contractWithProvider.purchaseLimit(walletAddress);
        const hasPurchased = await contractWithProvider.hasPurchased(walletAddress);
        
        console.log(`üìã Limite por usu√°rio: ${userLimit.toString()}`);
        console.log(`üìã J√° comprou antes: ${hasPurchased}`);
        
        if (hasPurchased && userLimit.eq(0)) {
            console.log('üö® PROBLEMA: Usu√°rio j√° atingiu limite de compras!');
            throw new Error('Voc√™ j√° atingiu o limite de compras para este token');
        }
    } catch (error) {
        if (error.message.includes('limite')) {
            throw error;
        }
        console.log('üìã Limites por usu√°rio: N√£o aplic√°vel');
    }
    
    console.log('‚úÖ Diagn√≥stico avan√ßado conclu√≠do - nenhum problema detectado');
}

/**
 * Analisa a raz√£o espec√≠fica do revert para dar feedback preciso
 */
async function analyzeRevertReason(error, contract, valueInWei) {
    console.log('üîç Analisando raz√£o do revert...');
    
    // Tenta extrair mensagem de revert
    let revertReason = 'Desconhecida';
    if (error.reason) {
        revertReason = error.reason;
    } else if (error.message.includes('revert')) {
        const match = error.message.match(/revert (.+)/);
        if (match) {
            revertReason = match[1];
        }
    }
    
    console.log(`üö® Raz√£o do revert: ${revertReason}`);
    
    // Testes espec√≠ficos baseados em padr√µes comuns
    const testScenarios = [
        {
            name: 'Valor muito baixo',
            test: async () => {
                const minValue = ethers.utils.parseEther('0.001'); // 0.001 BNB
                return await contract.callStatic[buyFunctionName]({ value: minValue, from: walletAddress });
            }
        },
        {
            name: 'Valor dobrado',
            test: async () => {
                const doubleValue = valueInWei.mul(2);
                return await contract.callStatic[buyFunctionName]({ value: doubleValue, from: walletAddress });
            }
        },
        {
            name: 'Valor exato do pre√ßo',
            test: async () => {
                const exactPrice = ethers.utils.parseEther(tokenInfo.price);
                return await contract.callStatic[buyFunctionName]({ value: exactPrice, from: walletAddress });
            }
        },
        {
            name: 'Sem valor (0 BNB)',
            test: async () => {
                return await contract.callStatic[buyFunctionName]({ value: 0, from: walletAddress });
            }
        }
    ];
    
    for (const scenario of testScenarios) {
        try {
            console.log(`üß™ Testando: ${scenario.name}`);
            await scenario.test();
            console.log(`‚úÖ ${scenario.name}: FUNCIONOU!`);
            addPurchaseMessage(`üí° Descoberta: ${scenario.name} funciona - ajuste necess√°rio`, 'warning');
            return;
        } catch (testError) {
            console.log(`‚ùå ${scenario.name}: ${testError.reason || 'Falhou'}`);
        }
    }
    
    // An√°lise de padr√µes comuns de revert
    const commonReverts = {
        'insufficient funds': 'Saldo insuficiente no contrato ou usu√°rio',
        'not enough tokens': 'Contrato sem tokens suficientes',
        'paused': 'Contrato est√° pausado',
        'not whitelisted': 'Endere√ßo n√£o est√° na whitelist',
        'sale not active': 'Venda n√£o est√° ativa',
        'minimum purchase': 'Valor abaixo do m√≠nimo',
        'maximum purchase': 'Valor acima do m√°ximo',
        'already purchased': 'Usu√°rio j√° comprou antes',
        'wrong price': 'Pre√ßo incorreto',
        'invalid amount': 'Quantidade inv√°lida'
    };
    
    for (const [pattern, explanation] of Object.entries(commonReverts)) {
        if (revertReason.toLowerCase().includes(pattern)) {
            console.log(`üí° Padr√£o identificado: ${explanation}`);
            addPurchaseMessage(`‚ùå Erro identificado: ${explanation}`, 'error');
            return;
        }
    }
    
    // Se n√£o conseguiu identificar, mostra a raz√£o bruta
    addPurchaseMessage(`‚ùå Contrato rejeitou: ${revertReason}`, 'error');
}

// ==================== FUN√á√ïES AUXILIARES ====================

/**
 * Atualiza status de compatibilidade
 */
function updateCompatibilityStatus(elementId, text, type) {
    const element = document.getElementById(elementId);
    if (element) {
        element.textContent = text;
        element.className = `fw-bold mb-1 text-${type === 'success' ? 'success' : type === 'error' ? 'danger' : 'warning'}`;
    }
}

/**
 * Atualiza bot√£o de verifica√ß√£o
 */
function updateVerifyButton(isLoading) {
    const btn = document.getElementById('verify-contract-btn');
    if (btn) {
        if (isLoading) {
            btn.innerHTML = '<i class="bi bi-arrow-clockwise spin me-2"></i>VERIFICANDO...';
            btn.disabled = true;
        } else {
            btn.innerHTML = '<i class="bi bi-search me-2"></i>VERIFICAR';
            btn.disabled = false;
        }
    }
}

/**
 * Mostra se√ß√£o de informa√ß√µes do token
 */
function showTokenInfo() {
    const section = document.getElementById('token-info-section');
    if (section) {
        section.style.display = 'block';
    }
}

/**
 * Esconde se√ß√£o de informa√ß√µes do token
 */
function hideTokenInfo() {
    const section = document.getElementById('token-info-section');
    if (section) {
        section.style.display = 'none';
    }
}

/**
 * Mostra detalhes da transa√ß√£o
 */
function showTransactionDetails(receipt, tokensQuantity, totalValue) {
    const section = document.getElementById('transactionDetails');
    if (section) {
        section.style.display = 'block';
        
        // Preenche os dados
        document.getElementById('txHash').textContent = receipt.transactionHash;
        document.getElementById('txTokensReceived').textContent = `${formatNumber(tokensQuantity)} ${tokenInfo.symbol}`;
        document.getElementById('txValue').textContent = `${formatNumber(totalValue)} BNB`;
        
        // Calcula gas usado
        const gasUsed = receipt.gasUsed;
        const gasPrice = receipt.effectiveGasPrice || ethers.utils.parseUnits('5', 'gwei');
        const gasCost = ethers.utils.formatEther(gasUsed.mul(gasPrice));
        document.getElementById('txGasPrice').textContent = `${formatNumber(gasCost)} BNB`;
        
        // Total pago
        const totalCost = parseFloat(totalValue) + parseFloat(gasCost);
        document.getElementById('txTotalCost').textContent = `${formatNumber(totalCost)} BNB`;
    }
}

/**
 * Formata n√∫meros para exibi√ß√£o
 */
function formatNumber(num) {
    const number = parseFloat(num);
    if (isNaN(number)) return '0';
    
    if (number >= 1000000) {
        return (number / 1000000).toFixed(2) + 'M';
    } else if (number >= 1000) {
        return (number / 1000).toFixed(2) + 'K';
    } else if (number < 0.001 && number > 0) {
        return number.toExponential(3);
    } else {
        return number.toLocaleString('pt-BR', { maximumFractionDigits: 6 });
    }
}

// ==================== SISTEMA DE FEEDBACK ====================

/**
 * Adiciona mensagem na se√ß√£o de contrato
 */
function addContractMessage(msg, type = 'info') {
    const listId = "contractErrors";
    const containerId = "contractResult";
    
    const container = document.getElementById(containerId);
    const list = document.getElementById(listId);
    
    if (container && list) {
        const li = document.createElement('li');
        li.innerHTML = msg;
        li.className = getMessageClass(type);
        list.appendChild(li);
        container.style.display = 'block';
        
        // Auto-scroll
        container.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }
}

/**
 * Adiciona mensagem na se√ß√£o de compra
 */
function addPurchaseMessage(msg, type = 'info') {
    const listId = "purchaseErrors";
    const containerId = "purchaseResult";
    
    const container = document.getElementById(containerId);
    const list = document.getElementById(listId);
    
    if (container && list) {
        const li = document.createElement('li');
        li.innerHTML = msg;
        li.className = getMessageClass(type);
        list.appendChild(li);
        container.style.display = 'block';
        
        // Auto-scroll
        container.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }
}

/**
 * Limpa mensagens da se√ß√£o de contrato
 */
function clearContractMessages() {
    const list = document.getElementById("contractErrors");
    const container = document.getElementById("contractResult");
    
    if (list) list.innerHTML = '';
    if (container) container.style.display = 'none';
}

/**
 * Limpa mensagens da se√ß√£o de compra
 */
function clearPurchaseMessages() {
    const list = document.getElementById("purchaseErrors");
    const container = document.getElementById("purchaseResult");
    
    if (list) list.innerHTML = '';
    if (container) container.style.display = 'none';
}

/**
 * Retorna classe CSS baseada no tipo de mensagem
 */
function getMessageClass(type) {
    const classes = {
        'info': 'text-info',
        'success': 'text-success', 
        'warning': 'text-warning',
        'error': 'text-danger'
    };
    return classes[type] || 'text-info';
}

// ==================== FUN√á√ïES GLOBAIS PARA COMPATIBILIDADE ====================

/**
 * Inicializa conex√£o da wallet (compatibilidade)
 */
function initializeWalletConnection() {
    // Monitora mudan√ßas de rede e conta
    if (typeof window.ethereum !== 'undefined') {
        window.ethereum.on('accountsChanged', (accounts) => {
            if (accounts.length > 0) {
                walletAddress = accounts[0];
                walletConnected = true;
                updateWalletUI();
            } else {
                walletConnected = false;
                walletAddress = '';
                // Reset da interface
                location.reload();
            }
        });
        
        window.ethereum.on('chainChanged', () => {
            // Recarrega a p√°gina quando muda de rede
            location.reload();
        });
    }
}

// ==================== SISTEMA DE FALLBACK RPC ====================

/**
 * Inicializa provider com fallback para resolver problemas de RPC
 * ESTRAT√âGIA: Usa APENAS RPC p√∫blico para leitura, MetaMask apenas para transa√ß√µes
 */
async function initializeProviderWithFallback() {
    console.log('üîÑ Inicializando provider com estrat√©gia RPC-primeiro');
    
    // NUNCA usa MetaMask para opera√ß√µes de leitura
    // Detecta chain ID da MetaMask para usar RPC correspondente
    let chainId = 97; // BSC Testnet padr√£o
    
    try {
        const currentChainId = await window.ethereum.request({ method: 'eth_chainId' });
        chainId = parseInt(currentChainId, 16);
        console.log(`üåê Chain ID detectado: ${chainId}`);
    } catch (error) {
        console.warn('‚ö†Ô∏è N√£o foi poss√≠vel detectar chain ID, usando BSC Testnet');
    }
    
    // RPC endpoints por rede
    const rpcEndpoints = {
        97: [  // BSC Testnet
            'https://data-seed-prebsc-1-s1.binance.org:8545',
            'https://bsc-testnet.binance.org',
            'https://data-seed-prebsc-2-s1.binance.org:8545',
            'https://bsc-testnet-rpc.publicnode.com'
        ],
        56: [  // BSC Mainnet
            'https://bsc-dataseed.binance.org',
            'https://bsc-dataseed1.defibit.io',
            'https://bsc-dataseed1.ninicoin.io'
        ]
    };
    
    const endpoints = rpcEndpoints[chainId] || rpcEndpoints[97];
    
    for (let i = 0; i < endpoints.length; i++) {
        const rpcUrl = endpoints[i];
        try {
            console.log(`üîç Testando RPC ${i + 1}/${endpoints.length}: ${rpcUrl}`);
            
            const provider = new ethers.providers.JsonRpcProvider(rpcUrl);
            
            // Teste r√°pido de conectividade (3s timeout)
            const network = await Promise.race([
                provider.getNetwork(),
                new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 3000))
            ]);
            
            console.log(`‚úÖ RPC funcionando: ${rpcUrl} - Rede: ${network.name} (${network.chainId})`);
            return provider;
            
        } catch (error) {
            console.warn(`‚ùå RPC ${i + 1} falhou: ${rpcUrl} - ${error.message}`);
        }
    }
    
    throw new Error('‚ùå Todos os RPC endpoints falharam - verifique sua conex√£o com a internet');
}

/**
 * Obt√©m URL de RPC fallback baseado na rede
 */
function getFallbackRpcUrl(chainId) {
    const rpcUrls = {
        97: [
            'https://data-seed-prebsc-1-s1.binance.org:8545/',
            'https://data-seed-prebsc-2-s1.binance.org:8545/',
            'https://bsc-testnet.publicnode.com'
        ],  // BSC Testnet
        56: [
            'https://bsc-dataseed.binance.org/',
            'https://bsc-mainnet.public.blastapi.io',
            'https://bsc.publicnode.com'
        ],  // BSC Mainnet
        1: [
            'https://cloudflare-eth.com/',
            'https://ethereum.publicnode.com',
            'https://rpc.ankr.com/eth'
        ],  // Ethereum Mainnet
        137: [
            'https://polygon-rpc.com/',
            'https://polygon.publicnode.com',
            'https://rpc.ankr.com/polygon'
        ]   // Polygon Mainnet
    };
    
    const urls = rpcUrls[chainId];
    return urls ? urls[0] : null; // Retorna primeiro RPC dispon√≠vel
}

/**
 * Tenta obter c√≥digo do contrato com retry
 */
async function getCodeWithRetry(contractAddress, maxRetries = 3) {
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            const code = await currentProvider.getCode(contractAddress);
            return code;
        } catch (error) {
            console.warn(`‚ö†Ô∏è Tentativa ${attempt}/${maxRetries} falhou:`, error.message);
            
            if (attempt === maxRetries) {
                throw error;
            }
            
            // Aguarda antes de tentar novamente
            await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
        }
    }
}

/**
 * Retry com provider alternativo - tenta m√∫ltiplos RPCs
 */
async function retryWithFallbackProvider(contractAddress) {
    // Detecta chain ID
    const chainId = await window.ethereum.request({ method: 'eth_chainId' });
    const chainIdDecimal = parseInt(chainId, 16);
    
    // Obt√©m lista de RPCs
    const rpcUrls = getFallbackRpcUrls(chainIdDecimal);
    if (!rpcUrls || rpcUrls.length === 0) {
        throw new Error('Nenhum RPC alternativo dispon√≠vel para esta rede');
    }
    
    // Tenta cada RPC at√© encontrar um que funcione
    for (let i = 0; i < rpcUrls.length; i++) {
        try {
            const rpcUrl = rpcUrls[i];
            addContractMessage(`üîÑ Tentando RPC ${i + 1}/${rpcUrls.length}: ${rpcUrl}`, 'info');
            
            // Cria novo provider
            const fallbackProvider = new ethers.providers.JsonRpcProvider(rpcUrl);
            
            // Testa conectividade
            await fallbackProvider.getNetwork();
            
            // Testa com novo provider
            const code = await fallbackProvider.getCode(contractAddress);
            if (code === '0x') {
                throw new Error('Endere√ßo n√£o √© um smart contract v√°lido');
            }
            
            addContractMessage('‚úÖ Smart contract detectado via RPC alternativo', 'success');
            
            // Atualiza provider global
            currentProvider = fallbackProvider;
            currentSigner = null; // Sem signer no RPC p√∫blico
            
            // Continua verifica√ß√£o
            currentContract = new ethers.Contract(contractAddress, CONFIG.tokenABI, currentProvider);
            await verifyERC20Functions();
            await verifyBuyFunctions();
            await loadTokenInfo();
            showTokenInfo();
            
            addContractMessage('üéâ Contrato verificado com RPC alternativo!', 'success');
            addContractMessage('‚ö†Ô∏è Para transa√ß√µes, reconecte com MetaMask', 'warning');
            return; // Sucesso, sai da fun√ß√£o
            
        } catch (error) {
            console.warn(`‚ùå RPC ${rpcUrls[i]} falhou:`, error.message);
            if (i === rpcUrls.length - 1) {
                // √öltimo RPC tamb√©m falhou
                throw new Error(`Todos os RPCs falharam. √öltimo erro: ${error.message}`);
            }
        }
    }
}

/**
 * Retorna lista completa de RPCs para fallback
 */
function getFallbackRpcUrls(chainId) {
    const rpcUrls = {
        97: [
            'https://data-seed-prebsc-1-s1.binance.org:8545/',
            'https://data-seed-prebsc-2-s1.binance.org:8545/',
            'https://bsc-testnet.publicnode.com',
            'https://endpoints.omniatech.io/v1/bsc/testnet/public'
        ],  // BSC Testnet
        56: [
            'https://bsc-dataseed.binance.org/',
            'https://bsc-mainnet.public.blastapi.io',
            'https://bsc.publicnode.com',
            'https://endpoints.omniatech.io/v1/bsc/mainnet/public'
        ],  // BSC Mainnet
        1: [
            'https://cloudflare-eth.com/',
            'https://ethereum.publicnode.com',
            'https://rpc.ankr.com/eth',
            'https://endpoints.omniatech.io/v1/eth/mainnet/public'
        ],  // Ethereum Mainnet
        137: [
            'https://polygon-rpc.com/',
            'https://polygon.publicnode.com',
            'https://rpc.ankr.com/polygon',
            'https://endpoints.omniatech.io/v1/matic/mainnet/public'
        ]   // Polygon Mainnet
    };
    
    return rpcUrls[chainId] || [];
}

// ==================== EXPORTS ====================

// Tornar fun√ß√µes dispon√≠veis globalmente para compatibilidade
window.DynamicTokenPurchase = {
    connectWallet,
    verifyContract,
    executePurchase,
    calculateTotal,
    addContractMessage,
    addPurchaseMessage,
    clearContractMessages,
    clearPurchaseMessages,
    initializeProviderWithFallback,
    retryWithFallbackProvider
};

// CSS para anima√ß√£o de loading
const style = document.createElement('style');
style.textContent = `
    .spin {
        animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }
`;
document.head.appendChild(style);

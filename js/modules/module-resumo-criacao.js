/*
=================================================================
M√ìDULO 3: RESUMO E CRIA√á√ÉO DO TOKEN - JAVASCRIPT
=================================================================

ARQUIVO: module-resumo-criacao.js
RESPONS√ÅVEL POR: 03-resumo-criacao.html

FUN√á√ïES PRINCIPAIS:
1. Carregar dados dos m√≥dulos anteriores via storage-manager.js
2. Exibir resumo formatado dos dados coletados
3. Executar sequ√™ncia: Gerar ‚Üí Compilar ‚Üí Deploy
4. Gerenciar feedback visual e progresso
5. Salvar dados do deploy e redirecionar para verifica√ß√£o

INPUTS (via Storage):
- TokenProjectData.tokenName (M√≥dulo 1)
- TokenProjectData.tokenSymbol (M√≥dulo 1) 
- TokenProjectData.decimals (M√≥dulo 1)
- TokenProjectData.totalSupply (M√≥dulo 1)
- TokenProjectData.ownerAddress (M√≥dulo 1)
- TokenProjectData.contractType (M√≥dulo 2)
- TokenProjectData.targetSuffix (M√≥dulo 2, se aplic√°vel)

OUTPUTS (para Storage):
- TokenProjectData.contractSource
- TokenProjectData.contractAbi
- TokenProjectData.contractBytecode
- TokenProjectData.deployedAddress
- TokenProjectData.deployTx
- TokenProjectData.stages.contratoDeployado = true

PR√ìXIMO M√ìDULO: 04-verificacao.html

=================================================================
*/

console.log('üöÄ [M√ìDULO 3] Iniciando module-resumo-criacao.js');

// =================================================================
// VARI√ÅVEIS GLOBAIS DO M√ìDULO
// =================================================================

let moduleData = null; // Dados carregados do storage
let currentStage = 'loading'; // loading, summary, creation, completed
let deployedInfo = null; // Informa√ß√µes do contrato deployado

// =================================================================
// INICIALIZA√á√ÉO DO M√ìDULO
// =================================================================

document.addEventListener('DOMContentLoaded', function() {
    console.log('üìã [M√ìDULO 3] DOM carregado, iniciando m√≥dulo...');
    
    // Inicializar m√≥dulo
    initModule();
});

/**
 * Fun√ß√£o principal de inicializa√ß√£o do m√≥dulo
 * ENTRADA: Nenhuma
 * SA√çDA: M√≥dulo inicializado com dados carregados
 */
async function initModule() {
    console.log('‚öôÔ∏è [M√ìDULO 3] Inicializando m√≥dulo de resumo e cria√ß√£o...');
    
    try {
        // 1. Verificar se h√° dados salvos dos m√≥dulos anteriores
        await loadPreviousData();
        
        // 2. Validar se os dados necess√°rios est√£o presentes
        if (!validateRequiredData()) {
            showError('Dados incompletos dos m√≥dulos anteriores. Retornando ao in√≠cio.');
            setTimeout(() => {
                window.location.href = '../modules/01-dados-basicos.html';
            }, 3000);
            return;
        }
        
        // 3. Exibir resumo dos dados
        await showDataSummary();
        
        // 4. Inicializar se√ß√£o de cria√ß√£o
        await initCreationSection();
        
        // 5. Atualizar interface
        updateModuleStage('summary');
        
        console.log('‚úÖ [M√ìDULO 3] M√≥dulo inicializado com sucesso');
        
    } catch (error) {
        console.error('‚ùå [M√ìDULO 3] Erro na inicializa√ß√£o:', error);
        showError('Erro ao inicializar m√≥dulo: ' + error.message);
    }
}

// =================================================================
// CARREGAMENTO DE DADOS DOS M√ìDULOS ANTERIORES
// =================================================================

/**
 * Carrega dados salvos pelos m√≥dulos anteriores
 * ENTRADA: Nenhuma
 * SA√çDA: moduleData preenchido com dados do localStorage
 */
async function loadPreviousData() {
    console.log('üìÇ [M√ìDULO 3] Carregando dados dos m√≥dulos anteriores...');
    
    try {
        // Usar o storage manager compartilhado
        moduleData = window.StorageManager.getAll();
        
        console.log('üìã [M√ìDULO 3] Dados carregados:', moduleData);
        
        if (!moduleData || Object.keys(moduleData).length === 0) {
            throw new Error('Nenhum dado encontrado dos m√≥dulos anteriores');
        }
        
        return moduleData;
        
    } catch (error) {
        console.error('‚ùå [M√ìDULO 3] Erro ao carregar dados:', error);
        throw error;
    }
}

/**
 * Valida se todos os dados necess√°rios est√£o presentes
 * ENTRADA: Nenhuma (usa moduleData global)
 * SA√çDA: boolean - true se dados v√°lidos, false caso contr√°rio
 */
function validateRequiredData() {
    console.log('üîç [M√ìDULO 3] Validando dados obrigat√≥rios...');
    
    const required = [
        'tokenName',
        'tokenSymbol', 
        'decimals',
        'totalSupply',
        'ownerAddress',
        'contractType'
    ];
    
    const missing = [];
    
    for (const field of required) {
        if (!moduleData[field]) {
            missing.push(field);
        }
    }
    
    if (missing.length > 0) {
        console.error('‚ùå [M√ìDULO 3] Campos obrigat√≥rios faltando:', missing);
        return false;
    }
    
    console.log('‚úÖ [M√ìDULO 3] Todos os dados obrigat√≥rios presentes');
    return true;
}

// =================================================================
// EXIBI√á√ÉO DO RESUMO DOS DADOS
// =================================================================

/**
 * Exibe resumo formatado dos dados coletados
 * ENTRADA: Nenhuma (usa moduleData global)
 * SA√çDA: HTML do resumo inserido na p√°gina
 */
async function showDataSummary() {
    console.log('üìä [M√ìDULO 3] Exibindo resumo dos dados...');
    
    const summarySection = document.getElementById('data-summary-section');
    const summaryData = document.getElementById('summary-data');
    
    if (!summarySection || !summaryData) {
        console.error('‚ùå [M√ìDULO 3] Elementos de resumo n√£o encontrados');
        return;
    }
    
    try {
        // Gerar HTML do resumo
        const summaryHTML = generateSummaryHTML();
        
        // Inserir na p√°gina
        summaryData.innerHTML = summaryHTML;
        
        // Mostrar se√ß√£o
        summarySection.style.display = 'block';
        
        console.log('‚úÖ [M√ìDULO 3] Resumo exibido com sucesso');
        
    } catch (error) {
        console.error('‚ùå [M√ìDULO 3] Erro ao exibir resumo:', error);
        showError('Erro ao gerar resumo dos dados');
    }
}

/**
 * Gera HTML formatado do resumo
 * ENTRADA: Nenhuma (usa moduleData global)
 * SA√çDA: String HTML do resumo
 */
function generateSummaryHTML() {
    console.log('üèóÔ∏è [M√ìDULO 3] Gerando HTML do resumo...');
    
    return `
        <div class="row g-3">
            <!-- Dados B√°sicos do Token -->
            <div class="col-md-6">
                <h6 class="text-primary"><i class="bi bi-info-circle me-1"></i>Dados B√°sicos</h6>
                <table class="table table-sm">
                    <tr>
                        <td><strong>Nome:</strong></td>
                        <td>${moduleData.tokenName || 'N√£o definido'}</td>
                    </tr>
                    <tr>
                        <td><strong>S√≠mbolo:</strong></td>
                        <td>${moduleData.tokenSymbol || 'N√£o definido'}</td>
                    </tr>
                    <tr>
                        <td><strong>Decimais:</strong></td>
                        <td>${moduleData.decimals || '18'}</td>
                    </tr>
                    <tr>
                        <td><strong>Supply Total:</strong></td>
                        <td>${formatNumber(moduleData.totalSupply) || 'N√£o definido'}</td>
                    </tr>
                </table>
            </div>
            
            <!-- Configura√ß√µes -->
            <div class="col-md-6">
                <h6 class="text-success"><i class="bi bi-gear me-1"></i>Configura√ß√µes</h6>
                <table class="table table-sm">
                    <tr>
                        <td><strong>Propriet√°rio:</strong></td>
                        <td><small>${moduleData.ownerAddress || 'N√£o definido'}</small></td>
                    </tr>
                    <tr>
                        <td><strong>Tipo de Contrato:</strong></td>
                        <td>${moduleData.contractType === 'custom' ? 'Personalizado' : 'Simples'}</td>
                    </tr>
                    ${moduleData.contractType === 'custom' && moduleData.targetSuffix ? `
                    <tr>
                        <td><strong>Sufixo Desejado:</strong></td>
                        <td>${moduleData.targetSuffix}</td>
                    </tr>
                    ` : ''}
                    <tr>
                        <td><strong>Rede:</strong></td>
                        <td>${moduleData.networkName || 'Ser√° detectada'}</td>
                    </tr>
                </table>
            </div>
        </div>
        
        ${moduleData.tokenImage ? `
        <div class="row mt-3">
            <div class="col-12">
                <h6 class="text-info"><i class="bi bi-image me-1"></i>Imagem do Token</h6>
                <div class="d-flex align-items-center gap-3">
                    <img src="${moduleData.tokenImage}" alt="Token" style="width: 64px; height: 64px; border-radius: 8px;" 
                         onerror="this.style.display='none'">
                    <small class="text-muted">${moduleData.tokenImage}</small>
                </div>
            </div>
        </div>
        ` : ''}
    `;
}

// =================================================================
// INICIALIZA√á√ÉO DA SE√á√ÉO DE CRIA√á√ÉO
// =================================================================

/**
 * Inicializa a se√ß√£o de cria√ß√£o do token
 * ENTRADA: Nenhuma
 * SA√çDA: Se√ß√£o de cria√ß√£o carregada com template
 */
async function initCreationSection() {
    console.log('üîß [M√ìDULO 3] Inicializando se√ß√£o de cria√ß√£o...');
    
    try {
        const creationSection = document.getElementById('creation-section');
        const tokenSummary = document.getElementById('token-summary');
        
        if (!creationSection || !tokenSummary) {
            throw new Error('Elementos da se√ß√£o de cria√ß√£o n√£o encontrados');
        }
        
        // Carregar template resumo-template.html (reutilizado do sistema atual)
        console.log('üìÑ [M√ìDULO 3] Carregando template de cria√ß√£o...');
        
        // Usar sistema de templates existente
        if (window.loadTemplate && window.fillTemplate) {
            await window.fillTemplate('resumo-template', getTemplateData(), tokenSummary);
            console.log('‚úÖ [M√ìDULO 3] Template carregado via sistema existente');
        } else {
            // Fallback: HTML simples
            tokenSummary.innerHTML = generateCreationFallbackHTML();
            console.log('‚ö†Ô∏è [M√ìDULO 3] Template carregado via fallback');
        }
        
        // Configurar event listeners dos bot√µes
        setupCreationButtons();
        
        // Mostrar se√ß√£o
        creationSection.style.display = 'block';
        
        console.log('‚úÖ [M√ìDULO 3] Se√ß√£o de cria√ß√£o inicializada');
        
    } catch (error) {
        console.error('‚ùå [M√ìDULO 3] Erro ao inicializar cria√ß√£o:', error);
        showError('Erro ao carregar se√ß√£o de cria√ß√£o');
    }
}

/**
 * Prepara dados para o template de cria√ß√£o
 * ENTRADA: Nenhuma (usa moduleData global)
 * SA√çDA: Object com dados formatados para o template
 */
function getTemplateData() {
    console.log('üìã [M√ìDULO 3] Preparando dados para template...');
    
    return {
        'summary-nome': moduleData.tokenName || '',
        'summary-symbol': moduleData.tokenSymbol || '',
        'summary-decimals': moduleData.decimals || '18',
        'summary-supply': formatNumber(moduleData.totalSupply) || '',
        'summary-owner': moduleData.ownerAddress || '',
        'summary-network': moduleData.networkName || 'Ser√° detectada',
        'summary-address-type': moduleData.contractType === 'custom' ? 'Personalizado' : 'Padr√£o',
        'summary-image': moduleData.tokenImage || ''
    };
}

/**
 * Gera HTML de fallback para cria√ß√£o
 * ENTRADA: Nenhuma
 * SA√çDA: String HTML simples para cria√ß√£o
 */
function generateCreationFallbackHTML() {
    return `
        <div class="alert alert-info">
            <h6>Cria√ß√£o do Token</h6>
            <p>Execute os passos na ordem: Gerar ‚Üí Compilar ‚Üí Deploy</p>
            <div class="d-grid gap-2">
                <button id="btn-gerar" class="btn btn-primary">
                    <i class="bi bi-file-earmark-code me-1"></i>Gerar Contrato
                </button>
                <button id="btn-compilar" class="btn btn-warning" disabled>
                    <i class="bi bi-tools me-1"></i>Compilar
                </button>
                <button id="btn-deploy" class="btn btn-success" disabled>
                    <i class="bi bi-rocket me-1"></i>Deploy
                </button>
            </div>
        </div>
    `;
}

// =================================================================
// CONFIGURA√á√ÉO DOS BOT√ïES DE CRIA√á√ÉO
// =================================================================

/**
 * Configura event listeners dos bot√µes de cria√ß√£o
 * ENTRADA: Nenhuma
 * SA√çDA: Event listeners configurados
 */
function setupCreationButtons() {
    console.log('üîò [M√ìDULO 3] Configurando bot√µes de cria√ß√£o...');
    
    // Aguardar um pouco para bot√µes carregarem
    setTimeout(() => {
        // Bot√£o Gerar Contrato
        const btnGerar = document.getElementById('btn-salvar-contrato') || document.getElementById('btn-gerar');
        if (btnGerar) {
            btnGerar.onclick = handleGerarContrato;
            console.log('‚úÖ [M√ìDULO 3] Bot√£o Gerar configurado');
        }
        
        // Bot√£o Compilar
        const btnCompilar = document.getElementById('btn-compilar-contrato') || document.getElementById('btn-compilar');
        if (btnCompilar) {
            btnCompilar.onclick = handleCompilarContrato;
            console.log('‚úÖ [M√ìDULO 3] Bot√£o Compilar configurado');
        }
        
        // Bot√£o Deploy
        const btnDeploy = document.getElementById('btn-deploy-contrato') || document.getElementById('btn-deploy');
        if (btnDeploy) {
            btnDeploy.onclick = handleDeployContrato;
            console.log('‚úÖ [M√ìDULO 3] Bot√£o Deploy configurado');
        }
        
        // Usar sistema de bot√µes funcionais se dispon√≠vel
        if (window.configureButtonListeners) {
            window.configureButtonListeners();
            console.log('‚úÖ [M√ìDULO 3] Sistema de bot√µes funcionais ativado');
        }
        
    }, 500);
}

// =================================================================
// HANDLERS DOS BOT√ïES DE CRIA√á√ÉO
// =================================================================

/**
 * Handler do bot√£o Gerar Contrato
 * ENTRADA: Event do clique
 * SA√çDA: Contrato gerado e salvo
 */
async function handleGerarContrato(event) {
    console.log('üîß [M√ìDULO 3] Executando gera√ß√£o de contrato...');
    
    try {
        // Prevenir comportamento padr√£o
        if (event) event.preventDefault();
        
        // Preparar dados do token para gera√ß√£o
        const tokenData = {
            nome: moduleData.tokenName,
            symbol: moduleData.tokenSymbol,
            decimals: moduleData.decimals,
            supply: moduleData.totalSupply,
            owner: moduleData.ownerAddress,
            image: moduleData.tokenImage || ''
        };
        
        console.log('üìã [M√ìDULO 3] Dados do token para gera√ß√£o:', tokenData);
        
        // Usar fun√ß√£o existente de gera√ß√£o se dispon√≠vel
        if (window.salvarContrato) {
            await window.salvarContrato(tokenData, () => {
                console.log('‚úÖ [M√ìDULO 3] Contrato gerado com sucesso');
                
                // Salvar no storage que contrato foi gerado
                window.StorageManager.save('stages', {
                    ...moduleData.stages,
                    contratoGerado: true
                });
                
                // Habilitar pr√≥ximo bot√£o
                enableNextButton('btn-compilar-contrato');
                enableNextButton('btn-compilar');
            });
        } else {
            throw new Error('Fun√ß√£o salvarContrato n√£o dispon√≠vel');
        }
        
    } catch (error) {
        console.error('‚ùå [M√ìDULO 3] Erro na gera√ß√£o:', error);
        showError('Erro ao gerar contrato: ' + error.message);
    }
}

/**
 * Handler do bot√£o Compilar Contrato
 * ENTRADA: Event do clique
 * SA√çDA: Contrato compilado
 */
async function handleCompilarContrato(event) {
    console.log('‚öôÔ∏è [M√ìDULO 3] Executando compila√ß√£o de contrato...');
    
    try {
        // Prevenir comportamento padr√£o
        if (event) event.preventDefault();
        
        // Usar fun√ß√£o existente de compila√ß√£o
        if (window.compilarContrato) {
            await window.compilarContrato(
                moduleData.tokenName,
                document.getElementById('btn-compilar-contrato') || document.getElementById('btn-compilar'),
                document.getElementById('compile-status'),
                document.getElementById('btn-deploy-contrato') || document.getElementById('btn-deploy')
            );
            
            console.log('‚úÖ [M√ìDULO 3] Compila√ß√£o conclu√≠da');
            
            // Salvar no storage que contrato foi compilado
            window.StorageManager.save('stages', {
                ...moduleData.stages,
                contratoCompilado: true
            });
            
            // Habilitar pr√≥ximo bot√£o
            enableNextButton('btn-deploy-contrato');
            enableNextButton('btn-deploy');
            
        } else {
            throw new Error('Fun√ß√£o compilarContrato n√£o dispon√≠vel');
        }
        
    } catch (error) {
        console.error('‚ùå [M√ìDULO 3] Erro na compila√ß√£o:', error);
        showError('Erro ao compilar contrato: ' + error.message);
    }
}

/**
 * Handler do bot√£o Deploy Contrato
 * ENTRADA: Event do clique
 * SA√çDA: Contrato deployado na blockchain
 */
async function handleDeployContrato(event) {
    console.log('üöÄ [M√ìDULO 3] Executando deploy de contrato...');
    
    try {
        // Prevenir comportamento padr√£o
        if (event) event.preventDefault();
        
        // Usar fun√ß√£o existente de deploy
        if (window.deployContrato) {
            const result = await window.deployContrato();
            
            if (result && result.contractAddress) {
                deployedInfo = result;
                
                console.log('‚úÖ [M√ìDULO 3] Deploy conclu√≠do:', deployedInfo);
                
                // Salvar informa√ß√µes do deploy no storage
                window.StorageManager.save('deployedAddress', deployedInfo.contractAddress);
                window.StorageManager.save('deployTx', deployedInfo.transactionHash);
                window.StorageManager.save('stages', {
                    ...moduleData.stages,
                    contratoDeployado: true
                });
                
                // Mostrar sucesso e preparar pr√≥ximo m√≥dulo
                await showDeploySuccess();
                
            } else {
                throw new Error('Deploy n√£o retornou endere√ßo do contrato');
            }
            
        } else {
            throw new Error('Fun√ß√£o deployContrato n√£o dispon√≠vel');
        }
        
    } catch (error) {
        console.error('‚ùå [M√ìDULO 3] Erro no deploy:', error);
        showError('Erro ao fazer deploy: ' + error.message);
    }
}

// =================================================================
// FINALIZA√á√ÉO E NAVEGA√á√ÉO
// =================================================================

/**
 * Exibe sucesso do deploy e prepara pr√≥ximo m√≥dulo
 * ENTRADA: Nenhuma (usa deployedInfo global)
 * SA√çDA: Interface atualizada para sucesso
 */
async function showDeploySuccess() {
    console.log('üéâ [M√ìDULO 3] Exibindo sucesso do deploy...');
    
    try {
        const completionSection = document.getElementById('completion-section');
        const deployedInfoDiv = document.getElementById('deployed-info');
        
        if (completionSection && deployedInfoDiv) {
            // Gerar HTML das informa√ß√µes de deploy
            deployedInfoDiv.innerHTML = `
                <div class="row g-3">
                    <div class="col-md-6">
                        <strong>Endere√ßo do Contrato:</strong><br>
                        <code>${deployedInfo.contractAddress}</code>
                    </div>
                    <div class="col-md-6">
                        <strong>Hash da Transa√ß√£o:</strong><br>
                        <code>${deployedInfo.transactionHash}</code>
                    </div>
                </div>
                <div class="mt-3">
                    <small class="text-muted">
                        Estes dados foram salvos automaticamente. 
                        Agora voc√™ pode prosseguir para a verifica√ß√£o do contrato.
                    </small>
                </div>
            `;
            
            // Mostrar se√ß√£o de sucesso
            completionSection.style.display = 'block';
        }
        
        // Habilitar bot√£o de pr√≥ximo m√≥dulo
        const btnNext = document.getElementById('btn-next-module');
        if (btnNext) {
            btnNext.disabled = false;
        }
        
        // Atualizar est√°gio
        updateModuleStage('completed');
        
        console.log('‚úÖ [M√ìDULO 3] Sucesso exibido, pronto para pr√≥ximo m√≥dulo');
        
    } catch (error) {
        console.error('‚ùå [M√ìDULO 3] Erro ao exibir sucesso:', error);
    }
}

/**
 * Navega para o m√≥dulo de verifica√ß√£o
 * ENTRADA: Nenhuma
 * SA√çDA: Redirecionamento para m√≥dulo 4
 */
function goToNextModule() {
    console.log('‚û°Ô∏è [M√ìDULO 3] Navegando para m√≥dulo de verifica√ß√£o...');
    
    if (!deployedInfo) {
        showError('Conclua o deploy antes de prosseguir');
        return;
    }
    
    // Redirecionar para m√≥dulo de verifica√ß√£o
    window.location.href = '04-verificacao.html';
}

/**
 * Navega para o m√≥dulo anterior
 * ENTRADA: Nenhuma
 * SA√çDA: Redirecionamento para m√≥dulo 2
 */
function goToPreviousModule() {
    console.log('‚¨ÖÔ∏è [M√ìDULO 3] Navegando para m√≥dulo anterior...');
    window.location.href = '02-personalizacao.html';
}

// =================================================================
// FUN√á√ïES AUXILIARES
// =================================================================

/**
 * Atualiza o est√°gio visual do m√≥dulo
 * ENTRADA: String stage - novo est√°gio
 * SA√çDA: Interface atualizada
 */
function updateModuleStage(stage) {
    console.log(`üîÑ [M√ìDULO 3] Atualizando est√°gio para: ${stage}`);
    
    currentStage = stage;
    
    // Ocultar loading
    const loadingSection = document.getElementById('loading-section');
    if (loadingSection) {
        loadingSection.style.display = 'none';
    }
}

/**
 * Habilita bot√£o espec√≠fico
 * ENTRADA: String buttonId - ID do bot√£o
 * SA√çDA: Bot√£o habilitado
 */
function enableNextButton(buttonId) {
    const button = document.getElementById(buttonId);
    if (button) {
        button.disabled = false;
        console.log(`‚úÖ [M√ìDULO 3] Bot√£o ${buttonId} habilitado`);
    }
}

/**
 * Exibe erro para o usu√°rio
 * ENTRADA: String message - mensagem de erro
 * SA√çDA: Alerta de erro exibido
 */
function showError(message) {
    console.error(`‚ùå [M√ìDULO 3] ERRO: ${message}`);
    alert(`Erro no M√≥dulo 3: ${message}`);
}

/**
 * Formata n√∫meros para exibi√ß√£o
 * ENTRADA: String/Number number - n√∫mero a formatar
 * SA√çDA: String formatada
 */
function formatNumber(number) {
    if (!number) return '';
    return Number(number).toLocaleString('pt-BR');
}

// =================================================================
// FUN√á√ïES GLOBAIS (para compatibilidade)
// =================================================================

// Expor fun√ß√µes necess√°rias globalmente
window.goToNextModule = goToNextModule;
window.goToPreviousModule = goToPreviousModule;

console.log('‚úÖ [M√ìDULO 3] Script module-resumo-criacao.js carregado');
